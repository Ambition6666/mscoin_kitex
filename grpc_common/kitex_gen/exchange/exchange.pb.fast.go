// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package exchange

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *OrderReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OrderReq[number], err)
}

func (x *OrderReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Ip, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Symbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.PageSize, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Direction, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.UseDiscount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderReq) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.UpdateStatus, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *OrderRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OrderRes[number], err)
}

func (x *OrderRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ExchangeOrder
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *OrderRes) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExchangeOrder[number], err)
}

func (x *ExchangeOrder) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BaseSymbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CanceledTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CoinSymbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CompletedTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Direction, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.MemberId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Symbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.Time, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.TradedAmount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.Turnover, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrder) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	x.UseDiscount, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AddOrderRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddOrderRes[number], err)
}

func (x *AddOrderRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CancelOrderRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CancelOrderRes[number], err)
}

func (x *CancelOrderRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExchangeOrderOrigin[number], err)
}

func (x *ExchangeOrderOrigin) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OrderId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BaseSymbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CanceledTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CoinSymbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CompletedTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Direction, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.MemberId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Symbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.Time, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.TradedAmount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.Turnover, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeOrderOrigin) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	x.UseDiscount, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OrderReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	return offset
}

func (x *OrderReq) fastWriteField1(buf []byte) (offset int) {
	if x.Ip == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetIp())
	return offset
}

func (x *OrderReq) fastWriteField2(buf []byte) (offset int) {
	if x.Symbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSymbol())
	return offset
}

func (x *OrderReq) fastWriteField4(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetPage())
	return offset
}

func (x *OrderReq) fastWriteField5(buf []byte) (offset int) {
	if x.PageSize == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetPageSize())
	return offset
}

func (x *OrderReq) fastWriteField6(buf []byte) (offset int) {
	if x.UserId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetUserId())
	return offset
}

func (x *OrderReq) fastWriteField7(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 7, x.GetPrice())
	return offset
}

func (x *OrderReq) fastWriteField8(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 8, x.GetAmount())
	return offset
}

func (x *OrderReq) fastWriteField9(buf []byte) (offset int) {
	if x.Direction == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetDirection())
	return offset
}

func (x *OrderReq) fastWriteField10(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetType())
	return offset
}

func (x *OrderReq) fastWriteField11(buf []byte) (offset int) {
	if x.UseDiscount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 11, x.GetUseDiscount())
	return offset
}

func (x *OrderReq) fastWriteField12(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetOrderId())
	return offset
}

func (x *OrderReq) fastWriteField13(buf []byte) (offset int) {
	if x.UpdateStatus == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 13, x.GetUpdateStatus())
	return offset
}

func (x *OrderRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *OrderRes) fastWriteField1(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetList()[i])
	}
	return offset
}

func (x *OrderRes) fastWriteField2(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetTotal())
	return offset
}

func (x *ExchangeOrder) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	return offset
}

func (x *ExchangeOrder) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ExchangeOrder) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *ExchangeOrder) fastWriteField3(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.GetAmount())
	return offset
}

func (x *ExchangeOrder) fastWriteField4(buf []byte) (offset int) {
	if x.BaseSymbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetBaseSymbol())
	return offset
}

func (x *ExchangeOrder) fastWriteField5(buf []byte) (offset int) {
	if x.CanceledTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCanceledTime())
	return offset
}

func (x *ExchangeOrder) fastWriteField6(buf []byte) (offset int) {
	if x.CoinSymbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetCoinSymbol())
	return offset
}

func (x *ExchangeOrder) fastWriteField7(buf []byte) (offset int) {
	if x.CompletedTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCompletedTime())
	return offset
}

func (x *ExchangeOrder) fastWriteField8(buf []byte) (offset int) {
	if x.Direction == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetDirection())
	return offset
}

func (x *ExchangeOrder) fastWriteField11(buf []byte) (offset int) {
	if x.MemberId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetMemberId())
	return offset
}

func (x *ExchangeOrder) fastWriteField12(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 12, x.GetPrice())
	return offset
}

func (x *ExchangeOrder) fastWriteField13(buf []byte) (offset int) {
	if x.Status == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetStatus())
	return offset
}

func (x *ExchangeOrder) fastWriteField14(buf []byte) (offset int) {
	if x.Symbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetSymbol())
	return offset
}

func (x *ExchangeOrder) fastWriteField15(buf []byte) (offset int) {
	if x.Time == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetTime())
	return offset
}

func (x *ExchangeOrder) fastWriteField16(buf []byte) (offset int) {
	if x.TradedAmount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 16, x.GetTradedAmount())
	return offset
}

func (x *ExchangeOrder) fastWriteField17(buf []byte) (offset int) {
	if x.Turnover == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 17, x.GetTurnover())
	return offset
}

func (x *ExchangeOrder) fastWriteField18(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 18, x.GetType())
	return offset
}

func (x *ExchangeOrder) fastWriteField21(buf []byte) (offset int) {
	if x.UseDiscount == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 21, x.GetUseDiscount())
	return offset
}

func (x *AddOrderRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddOrderRes) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *CancelOrderRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CancelOrderRes) fastWriteField1(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetOrderId())
	return offset
}

func (x *ExchangeOrderOrigin) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField2(buf []byte) (offset int) {
	if x.OrderId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOrderId())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField3(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.GetAmount())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField4(buf []byte) (offset int) {
	if x.BaseSymbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetBaseSymbol())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField5(buf []byte) (offset int) {
	if x.CanceledTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCanceledTime())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField6(buf []byte) (offset int) {
	if x.CoinSymbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetCoinSymbol())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField7(buf []byte) (offset int) {
	if x.CompletedTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCompletedTime())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField8(buf []byte) (offset int) {
	if x.Direction == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 8, x.GetDirection())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField11(buf []byte) (offset int) {
	if x.MemberId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetMemberId())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField12(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 12, x.GetPrice())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField13(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 13, x.GetStatus())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField14(buf []byte) (offset int) {
	if x.Symbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetSymbol())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField15(buf []byte) (offset int) {
	if x.Time == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetTime())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField16(buf []byte) (offset int) {
	if x.TradedAmount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 16, x.GetTradedAmount())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField17(buf []byte) (offset int) {
	if x.Turnover == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 17, x.GetTurnover())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField18(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 18, x.GetType())
	return offset
}

func (x *ExchangeOrderOrigin) fastWriteField21(buf []byte) (offset int) {
	if x.UseDiscount == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 21, x.GetUseDiscount())
	return offset
}

func (x *OrderReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	return n
}

func (x *OrderReq) sizeField1() (n int) {
	if x.Ip == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetIp())
	return n
}

func (x *OrderReq) sizeField2() (n int) {
	if x.Symbol == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSymbol())
	return n
}

func (x *OrderReq) sizeField4() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetPage())
	return n
}

func (x *OrderReq) sizeField5() (n int) {
	if x.PageSize == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetPageSize())
	return n
}

func (x *OrderReq) sizeField6() (n int) {
	if x.UserId == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetUserId())
	return n
}

func (x *OrderReq) sizeField7() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeDouble(7, x.GetPrice())
	return n
}

func (x *OrderReq) sizeField8() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeDouble(8, x.GetAmount())
	return n
}

func (x *OrderReq) sizeField9() (n int) {
	if x.Direction == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetDirection())
	return n
}

func (x *OrderReq) sizeField10() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetType())
	return n
}

func (x *OrderReq) sizeField11() (n int) {
	if x.UseDiscount == 0 {
		return n
	}
	n += fastpb.SizeInt32(11, x.GetUseDiscount())
	return n
}

func (x *OrderReq) sizeField12() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetOrderId())
	return n
}

func (x *OrderReq) sizeField13() (n int) {
	if x.UpdateStatus == 0 {
		return n
	}
	n += fastpb.SizeInt32(13, x.GetUpdateStatus())
	return n
}

func (x *OrderRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *OrderRes) sizeField1() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(1, x.GetList()[i])
	}
	return n
}

func (x *OrderRes) sizeField2() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetTotal())
	return n
}

func (x *ExchangeOrder) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField21()
	return n
}

func (x *ExchangeOrder) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *ExchangeOrder) sizeField2() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOrderId())
	return n
}

func (x *ExchangeOrder) sizeField3() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.GetAmount())
	return n
}

func (x *ExchangeOrder) sizeField4() (n int) {
	if x.BaseSymbol == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetBaseSymbol())
	return n
}

func (x *ExchangeOrder) sizeField5() (n int) {
	if x.CanceledTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCanceledTime())
	return n
}

func (x *ExchangeOrder) sizeField6() (n int) {
	if x.CoinSymbol == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetCoinSymbol())
	return n
}

func (x *ExchangeOrder) sizeField7() (n int) {
	if x.CompletedTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCompletedTime())
	return n
}

func (x *ExchangeOrder) sizeField8() (n int) {
	if x.Direction == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetDirection())
	return n
}

func (x *ExchangeOrder) sizeField11() (n int) {
	if x.MemberId == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetMemberId())
	return n
}

func (x *ExchangeOrder) sizeField12() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeDouble(12, x.GetPrice())
	return n
}

func (x *ExchangeOrder) sizeField13() (n int) {
	if x.Status == "" {
		return n
	}
	n += fastpb.SizeString(13, x.GetStatus())
	return n
}

func (x *ExchangeOrder) sizeField14() (n int) {
	if x.Symbol == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetSymbol())
	return n
}

func (x *ExchangeOrder) sizeField15() (n int) {
	if x.Time == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetTime())
	return n
}

func (x *ExchangeOrder) sizeField16() (n int) {
	if x.TradedAmount == 0 {
		return n
	}
	n += fastpb.SizeDouble(16, x.GetTradedAmount())
	return n
}

func (x *ExchangeOrder) sizeField17() (n int) {
	if x.Turnover == 0 {
		return n
	}
	n += fastpb.SizeDouble(17, x.GetTurnover())
	return n
}

func (x *ExchangeOrder) sizeField18() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(18, x.GetType())
	return n
}

func (x *ExchangeOrder) sizeField21() (n int) {
	if x.UseDiscount == "" {
		return n
	}
	n += fastpb.SizeString(21, x.GetUseDiscount())
	return n
}

func (x *AddOrderRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddOrderRes) sizeField1() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrderId())
	return n
}

func (x *CancelOrderRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CancelOrderRes) sizeField1() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetOrderId())
	return n
}

func (x *ExchangeOrderOrigin) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField21()
	return n
}

func (x *ExchangeOrderOrigin) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *ExchangeOrderOrigin) sizeField2() (n int) {
	if x.OrderId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOrderId())
	return n
}

func (x *ExchangeOrderOrigin) sizeField3() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.GetAmount())
	return n
}

func (x *ExchangeOrderOrigin) sizeField4() (n int) {
	if x.BaseSymbol == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetBaseSymbol())
	return n
}

func (x *ExchangeOrderOrigin) sizeField5() (n int) {
	if x.CanceledTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCanceledTime())
	return n
}

func (x *ExchangeOrderOrigin) sizeField6() (n int) {
	if x.CoinSymbol == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetCoinSymbol())
	return n
}

func (x *ExchangeOrderOrigin) sizeField7() (n int) {
	if x.CompletedTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCompletedTime())
	return n
}

func (x *ExchangeOrderOrigin) sizeField8() (n int) {
	if x.Direction == 0 {
		return n
	}
	n += fastpb.SizeInt32(8, x.GetDirection())
	return n
}

func (x *ExchangeOrderOrigin) sizeField11() (n int) {
	if x.MemberId == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetMemberId())
	return n
}

func (x *ExchangeOrderOrigin) sizeField12() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeDouble(12, x.GetPrice())
	return n
}

func (x *ExchangeOrderOrigin) sizeField13() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(13, x.GetStatus())
	return n
}

func (x *ExchangeOrderOrigin) sizeField14() (n int) {
	if x.Symbol == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetSymbol())
	return n
}

func (x *ExchangeOrderOrigin) sizeField15() (n int) {
	if x.Time == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetTime())
	return n
}

func (x *ExchangeOrderOrigin) sizeField16() (n int) {
	if x.TradedAmount == 0 {
		return n
	}
	n += fastpb.SizeDouble(16, x.GetTradedAmount())
	return n
}

func (x *ExchangeOrderOrigin) sizeField17() (n int) {
	if x.Turnover == 0 {
		return n
	}
	n += fastpb.SizeDouble(17, x.GetTurnover())
	return n
}

func (x *ExchangeOrderOrigin) sizeField18() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(18, x.GetType())
	return n
}

func (x *ExchangeOrderOrigin) sizeField21() (n int) {
	if x.UseDiscount == "" {
		return n
	}
	n += fastpb.SizeString(21, x.GetUseDiscount())
	return n
}

var fieldIDToName_OrderReq = map[int32]string{
	1:  "Ip",
	2:  "Symbol",
	4:  "Page",
	5:  "PageSize",
	6:  "UserId",
	7:  "Price",
	8:  "Amount",
	9:  "Direction",
	10: "Type",
	11: "UseDiscount",
	12: "OrderId",
	13: "UpdateStatus",
}

var fieldIDToName_OrderRes = map[int32]string{
	1: "List",
	2: "Total",
}

var fieldIDToName_ExchangeOrder = map[int32]string{
	1:  "Id",
	2:  "OrderId",
	3:  "Amount",
	4:  "BaseSymbol",
	5:  "CanceledTime",
	6:  "CoinSymbol",
	7:  "CompletedTime",
	8:  "Direction",
	11: "MemberId",
	12: "Price",
	13: "Status",
	14: "Symbol",
	15: "Time",
	16: "TradedAmount",
	17: "Turnover",
	18: "Type",
	21: "UseDiscount",
}

var fieldIDToName_AddOrderRes = map[int32]string{
	1: "OrderId",
}

var fieldIDToName_CancelOrderRes = map[int32]string{
	1: "OrderId",
}

var fieldIDToName_ExchangeOrderOrigin = map[int32]string{
	1:  "Id",
	2:  "OrderId",
	3:  "Amount",
	4:  "BaseSymbol",
	5:  "CanceledTime",
	6:  "CoinSymbol",
	7:  "CompletedTime",
	8:  "Direction",
	11: "MemberId",
	12: "Price",
	13: "Status",
	14: "Symbol",
	15: "Time",
	16: "TradedAmount",
	17: "Turnover",
	18: "Type",
	21: "UseDiscount",
}
