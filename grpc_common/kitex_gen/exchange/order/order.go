// Code generated by Kitex v0.10.3. DO NOT EDIT.

package order

import (
	"context"
	"errors"
	exchange "grpc_common/kitex_gen/exchange"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"FindOrderHistory": kitex.NewMethodInfo(
		findOrderHistoryHandler,
		newFindOrderHistoryArgs,
		newFindOrderHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FindOrderCurrent": kitex.NewMethodInfo(
		findOrderCurrentHandler,
		newFindOrderCurrentArgs,
		newFindOrderCurrentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"Add": kitex.NewMethodInfo(
		addHandler,
		newAddArgs,
		newAddResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FindByOrderId": kitex.NewMethodInfo(
		findByOrderIdHandler,
		newFindByOrderIdArgs,
		newFindByOrderIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelOrder": kitex.NewMethodInfo(
		cancelOrderHandler,
		newCancelOrderArgs,
		newCancelOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	orderServiceInfo                = NewServiceInfo()
	orderServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Order"
	handlerType := (*exchange.Order)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func findOrderHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(exchange.OrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(exchange.Order).FindOrderHistory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FindOrderHistoryArgs:
		success, err := handler.(exchange.Order).FindOrderHistory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FindOrderHistoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFindOrderHistoryArgs() interface{} {
	return &FindOrderHistoryArgs{}
}

func newFindOrderHistoryResult() interface{} {
	return &FindOrderHistoryResult{}
}

type FindOrderHistoryArgs struct {
	Req *exchange.OrderReq
}

func (p *FindOrderHistoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(exchange.OrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FindOrderHistoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FindOrderHistoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FindOrderHistoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FindOrderHistoryArgs) Unmarshal(in []byte) error {
	msg := new(exchange.OrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FindOrderHistoryArgs_Req_DEFAULT *exchange.OrderReq

func (p *FindOrderHistoryArgs) GetReq() *exchange.OrderReq {
	if !p.IsSetReq() {
		return FindOrderHistoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FindOrderHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FindOrderHistoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FindOrderHistoryResult struct {
	Success *exchange.OrderRes
}

var FindOrderHistoryResult_Success_DEFAULT *exchange.OrderRes

func (p *FindOrderHistoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(exchange.OrderRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FindOrderHistoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FindOrderHistoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FindOrderHistoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FindOrderHistoryResult) Unmarshal(in []byte) error {
	msg := new(exchange.OrderRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FindOrderHistoryResult) GetSuccess() *exchange.OrderRes {
	if !p.IsSetSuccess() {
		return FindOrderHistoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FindOrderHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*exchange.OrderRes)
}

func (p *FindOrderHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindOrderHistoryResult) GetResult() interface{} {
	return p.Success
}

func findOrderCurrentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(exchange.OrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(exchange.Order).FindOrderCurrent(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FindOrderCurrentArgs:
		success, err := handler.(exchange.Order).FindOrderCurrent(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FindOrderCurrentResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFindOrderCurrentArgs() interface{} {
	return &FindOrderCurrentArgs{}
}

func newFindOrderCurrentResult() interface{} {
	return &FindOrderCurrentResult{}
}

type FindOrderCurrentArgs struct {
	Req *exchange.OrderReq
}

func (p *FindOrderCurrentArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(exchange.OrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FindOrderCurrentArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FindOrderCurrentArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FindOrderCurrentArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FindOrderCurrentArgs) Unmarshal(in []byte) error {
	msg := new(exchange.OrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FindOrderCurrentArgs_Req_DEFAULT *exchange.OrderReq

func (p *FindOrderCurrentArgs) GetReq() *exchange.OrderReq {
	if !p.IsSetReq() {
		return FindOrderCurrentArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FindOrderCurrentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FindOrderCurrentArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FindOrderCurrentResult struct {
	Success *exchange.OrderRes
}

var FindOrderCurrentResult_Success_DEFAULT *exchange.OrderRes

func (p *FindOrderCurrentResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(exchange.OrderRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FindOrderCurrentResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FindOrderCurrentResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FindOrderCurrentResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FindOrderCurrentResult) Unmarshal(in []byte) error {
	msg := new(exchange.OrderRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FindOrderCurrentResult) GetSuccess() *exchange.OrderRes {
	if !p.IsSetSuccess() {
		return FindOrderCurrentResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FindOrderCurrentResult) SetSuccess(x interface{}) {
	p.Success = x.(*exchange.OrderRes)
}

func (p *FindOrderCurrentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindOrderCurrentResult) GetResult() interface{} {
	return p.Success
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(exchange.OrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(exchange.Order).Add(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddArgs:
		success, err := handler.(exchange.Order).Add(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddArgs() interface{} {
	return &AddArgs{}
}

func newAddResult() interface{} {
	return &AddResult{}
}

type AddArgs struct {
	Req *exchange.OrderReq
}

func (p *AddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(exchange.OrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddArgs) Unmarshal(in []byte) error {
	msg := new(exchange.OrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddArgs_Req_DEFAULT *exchange.OrderReq

func (p *AddArgs) GetReq() *exchange.OrderReq {
	if !p.IsSetReq() {
		return AddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddResult struct {
	Success *exchange.AddOrderRes
}

var AddResult_Success_DEFAULT *exchange.AddOrderRes

func (p *AddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(exchange.AddOrderRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddResult) Unmarshal(in []byte) error {
	msg := new(exchange.AddOrderRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddResult) GetSuccess() *exchange.AddOrderRes {
	if !p.IsSetSuccess() {
		return AddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddResult) SetSuccess(x interface{}) {
	p.Success = x.(*exchange.AddOrderRes)
}

func (p *AddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddResult) GetResult() interface{} {
	return p.Success
}

func findByOrderIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(exchange.OrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(exchange.Order).FindByOrderId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FindByOrderIdArgs:
		success, err := handler.(exchange.Order).FindByOrderId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FindByOrderIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFindByOrderIdArgs() interface{} {
	return &FindByOrderIdArgs{}
}

func newFindByOrderIdResult() interface{} {
	return &FindByOrderIdResult{}
}

type FindByOrderIdArgs struct {
	Req *exchange.OrderReq
}

func (p *FindByOrderIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(exchange.OrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FindByOrderIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FindByOrderIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FindByOrderIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FindByOrderIdArgs) Unmarshal(in []byte) error {
	msg := new(exchange.OrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FindByOrderIdArgs_Req_DEFAULT *exchange.OrderReq

func (p *FindByOrderIdArgs) GetReq() *exchange.OrderReq {
	if !p.IsSetReq() {
		return FindByOrderIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FindByOrderIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FindByOrderIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FindByOrderIdResult struct {
	Success *exchange.ExchangeOrderOrigin
}

var FindByOrderIdResult_Success_DEFAULT *exchange.ExchangeOrderOrigin

func (p *FindByOrderIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(exchange.ExchangeOrderOrigin)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FindByOrderIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FindByOrderIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FindByOrderIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FindByOrderIdResult) Unmarshal(in []byte) error {
	msg := new(exchange.ExchangeOrderOrigin)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FindByOrderIdResult) GetSuccess() *exchange.ExchangeOrderOrigin {
	if !p.IsSetSuccess() {
		return FindByOrderIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FindByOrderIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*exchange.ExchangeOrderOrigin)
}

func (p *FindByOrderIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FindByOrderIdResult) GetResult() interface{} {
	return p.Success
}

func cancelOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(exchange.OrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(exchange.Order).CancelOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelOrderArgs:
		success, err := handler.(exchange.Order).CancelOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelOrderArgs() interface{} {
	return &CancelOrderArgs{}
}

func newCancelOrderResult() interface{} {
	return &CancelOrderResult{}
}

type CancelOrderArgs struct {
	Req *exchange.OrderReq
}

func (p *CancelOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(exchange.OrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelOrderArgs) Unmarshal(in []byte) error {
	msg := new(exchange.OrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelOrderArgs_Req_DEFAULT *exchange.OrderReq

func (p *CancelOrderArgs) GetReq() *exchange.OrderReq {
	if !p.IsSetReq() {
		return CancelOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelOrderResult struct {
	Success *exchange.CancelOrderRes
}

var CancelOrderResult_Success_DEFAULT *exchange.CancelOrderRes

func (p *CancelOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(exchange.CancelOrderRes)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelOrderResult) Unmarshal(in []byte) error {
	msg := new(exchange.CancelOrderRes)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelOrderResult) GetSuccess() *exchange.CancelOrderRes {
	if !p.IsSetSuccess() {
		return CancelOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*exchange.CancelOrderRes)
}

func (p *CancelOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelOrderResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FindOrderHistory(ctx context.Context, Req *exchange.OrderReq) (r *exchange.OrderRes, err error) {
	var _args FindOrderHistoryArgs
	_args.Req = Req
	var _result FindOrderHistoryResult
	if err = p.c.Call(ctx, "FindOrderHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindOrderCurrent(ctx context.Context, Req *exchange.OrderReq) (r *exchange.OrderRes, err error) {
	var _args FindOrderCurrentArgs
	_args.Req = Req
	var _result FindOrderCurrentResult
	if err = p.c.Call(ctx, "FindOrderCurrent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Add(ctx context.Context, Req *exchange.OrderReq) (r *exchange.AddOrderRes, err error) {
	var _args AddArgs
	_args.Req = Req
	var _result AddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindByOrderId(ctx context.Context, Req *exchange.OrderReq) (r *exchange.ExchangeOrderOrigin, err error) {
	var _args FindByOrderIdArgs
	_args.Req = Req
	var _result FindByOrderIdResult
	if err = p.c.Call(ctx, "FindByOrderId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelOrder(ctx context.Context, Req *exchange.OrderReq) (r *exchange.CancelOrderRes, err error) {
	var _args CancelOrderArgs
	_args.Req = Req
	var _result CancelOrderResult
	if err = p.c.Call(ctx, "CancelOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
