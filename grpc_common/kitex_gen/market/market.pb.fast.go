// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package market

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *MarketReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MarketReq[number], err)
}

func (x *MarketReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Ip, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarketReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Symbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarketReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Unit, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarketReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.From, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MarketReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.To, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MarketReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Resolution, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MarketReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SymbolThumbRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SymbolThumbRes[number], err)
}

func (x *SymbolThumbRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v CoinThumb
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *CoinThumb) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CoinThumb[number], err)
}

func (x *CoinThumb) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Symbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Open, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.High, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Low, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Close, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Chg, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Change, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Volume, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Turnover, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.LastDayClose, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.UsdRate, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.BaseUsdRate, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Zone, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *CoinThumb) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v float64
			v, offset, err = fastpb.ReadDouble(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Trend = append(x.Trend, v)
			return offset, err
		})
	return offset, err
}

func (x *ExchangeCoin) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 19:
		offset, err = x.fastReadField19(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 24:
		offset, err = x.fastReadField24(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 25:
		offset, err = x.fastReadField25(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 26:
		offset, err = x.fastReadField26(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 27:
		offset, err = x.fastReadField27(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 28:
		offset, err = x.fastReadField28(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 29:
		offset, err = x.fastReadField29(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExchangeCoin[number], err)
}

func (x *ExchangeCoin) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Symbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.BaseCoinScale, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BaseSymbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CoinScale, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CoinSymbol, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Enable, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Fee, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.EnableMarketBuy, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.EnableMarketSell, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.MinSellPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Flag, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.MaxTradingOrder, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.MaxTradingTime, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.MinTurnover, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.ClearTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField19(buf []byte, _type int8) (offset int, err error) {
	x.Exchangeable, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	x.MaxBuyPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	x.MaxVolume, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	x.MinVolume, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	x.PublishAmount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField24(buf []byte, _type int8) (offset int, err error) {
	x.PublishPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField25(buf []byte, _type int8) (offset int, err error) {
	x.PublishType, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField26(buf []byte, _type int8) (offset int, err error) {
	x.RobotType, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField27(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField28(buf []byte, _type int8) (offset int, err error) {
	x.Visible, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExchangeCoin) fastReadField29(buf []byte, _type int8) (offset int, err error) {
	x.Zone, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 19:
		offset, err = x.fastReadField19(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 24:
		offset, err = x.fastReadField24(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 25:
		offset, err = x.fastReadField25(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 26:
		offset, err = x.fastReadField26(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 27:
		offset, err = x.fastReadField27(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 28:
		offset, err = x.fastReadField28(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Coin[number], err)
}

func (x *Coin) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CanAutoWithdraw, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CanRecharge, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CanTransfer, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CanWithdraw, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CnyRate, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.EnableRpc, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.IsPlatformCoin, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.MaxTxFee, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.MaxWithdrawAmount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.MinTxFee, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.MinWithdrawAmount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.NameCn, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.Sort, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.Unit, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	x.UsdRate, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField19(buf []byte, _type int8) (offset int, err error) {
	x.WithdrawThreshold, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	x.HasLegal, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	x.ColdWalletAddress, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	x.MinerFee, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	x.WithdrawScale, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField24(buf []byte, _type int8) (offset int, err error) {
	x.AccountType, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField25(buf []byte, _type int8) (offset int, err error) {
	x.DepositAddress, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField26(buf []byte, _type int8) (offset int, err error) {
	x.Infolink, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField27(buf []byte, _type int8) (offset int, err error) {
	x.Information, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Coin) fastReadField28(buf []byte, _type int8) (offset int, err error) {
	x.MinRechargeAmount, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *History) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_History[number], err)
}

func (x *History) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Time, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *History) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Open, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *History) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Close, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *History) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.High, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *History) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Low, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *History) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Volume, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *HistoryRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HistoryRes[number], err)
}

func (x *HistoryRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v History
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *ExchangeCoinRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExchangeCoinRes[number], err)
}

func (x *ExchangeCoinRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v ExchangeCoin
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *CoinList) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CoinList[number], err)
}

func (x *CoinList) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Coin
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.List = append(x.List, &v)
	return offset, nil
}

func (x *RateReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RateReq[number], err)
}

func (x *RateReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Unit, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RateReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Ip, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RateRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RateRes[number], err)
}

func (x *RateRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Rate, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *MarketReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *MarketReq) fastWriteField1(buf []byte) (offset int) {
	if x.Ip == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetIp())
	return offset
}

func (x *MarketReq) fastWriteField2(buf []byte) (offset int) {
	if x.Symbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSymbol())
	return offset
}

func (x *MarketReq) fastWriteField3(buf []byte) (offset int) {
	if x.Unit == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUnit())
	return offset
}

func (x *MarketReq) fastWriteField4(buf []byte) (offset int) {
	if x.From == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetFrom())
	return offset
}

func (x *MarketReq) fastWriteField5(buf []byte) (offset int) {
	if x.To == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetTo())
	return offset
}

func (x *MarketReq) fastWriteField6(buf []byte) (offset int) {
	if x.Resolution == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetResolution())
	return offset
}

func (x *MarketReq) fastWriteField7(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetId())
	return offset
}

func (x *SymbolThumbRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SymbolThumbRes) fastWriteField1(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetList()[i])
	}
	return offset
}

func (x *CoinThumb) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *CoinThumb) fastWriteField1(buf []byte) (offset int) {
	if x.Symbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSymbol())
	return offset
}

func (x *CoinThumb) fastWriteField2(buf []byte) (offset int) {
	if x.Open == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetOpen())
	return offset
}

func (x *CoinThumb) fastWriteField3(buf []byte) (offset int) {
	if x.High == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.GetHigh())
	return offset
}

func (x *CoinThumb) fastWriteField4(buf []byte) (offset int) {
	if x.Low == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 4, x.GetLow())
	return offset
}

func (x *CoinThumb) fastWriteField5(buf []byte) (offset int) {
	if x.Close == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 5, x.GetClose())
	return offset
}

func (x *CoinThumb) fastWriteField6(buf []byte) (offset int) {
	if x.Chg == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 6, x.GetChg())
	return offset
}

func (x *CoinThumb) fastWriteField7(buf []byte) (offset int) {
	if x.Change == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 7, x.GetChange())
	return offset
}

func (x *CoinThumb) fastWriteField8(buf []byte) (offset int) {
	if x.Volume == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 8, x.GetVolume())
	return offset
}

func (x *CoinThumb) fastWriteField9(buf []byte) (offset int) {
	if x.Turnover == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 9, x.GetTurnover())
	return offset
}

func (x *CoinThumb) fastWriteField10(buf []byte) (offset int) {
	if x.LastDayClose == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 10, x.GetLastDayClose())
	return offset
}

func (x *CoinThumb) fastWriteField11(buf []byte) (offset int) {
	if x.UsdRate == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 11, x.GetUsdRate())
	return offset
}

func (x *CoinThumb) fastWriteField12(buf []byte) (offset int) {
	if x.BaseUsdRate == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 12, x.GetBaseUsdRate())
	return offset
}

func (x *CoinThumb) fastWriteField13(buf []byte) (offset int) {
	if x.Zone == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 13, x.GetZone())
	return offset
}

func (x *CoinThumb) fastWriteField14(buf []byte) (offset int) {
	if len(x.Trend) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 14, len(x.GetTrend()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteDouble(buf[offset:], numTagOrKey, x.GetTrend()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *ExchangeCoin) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField19(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField24(buf[offset:])
	offset += x.fastWriteField25(buf[offset:])
	offset += x.fastWriteField26(buf[offset:])
	offset += x.fastWriteField27(buf[offset:])
	offset += x.fastWriteField28(buf[offset:])
	offset += x.fastWriteField29(buf[offset:])
	return offset
}

func (x *ExchangeCoin) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ExchangeCoin) fastWriteField2(buf []byte) (offset int) {
	if x.Symbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSymbol())
	return offset
}

func (x *ExchangeCoin) fastWriteField3(buf []byte) (offset int) {
	if x.BaseCoinScale == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetBaseCoinScale())
	return offset
}

func (x *ExchangeCoin) fastWriteField4(buf []byte) (offset int) {
	if x.BaseSymbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetBaseSymbol())
	return offset
}

func (x *ExchangeCoin) fastWriteField5(buf []byte) (offset int) {
	if x.CoinScale == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetCoinScale())
	return offset
}

func (x *ExchangeCoin) fastWriteField6(buf []byte) (offset int) {
	if x.CoinSymbol == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetCoinSymbol())
	return offset
}

func (x *ExchangeCoin) fastWriteField7(buf []byte) (offset int) {
	if x.Enable == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, x.GetEnable())
	return offset
}

func (x *ExchangeCoin) fastWriteField8(buf []byte) (offset int) {
	if x.Fee == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 8, x.GetFee())
	return offset
}

func (x *ExchangeCoin) fastWriteField9(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, x.GetSort())
	return offset
}

func (x *ExchangeCoin) fastWriteField10(buf []byte) (offset int) {
	if x.EnableMarketBuy == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 10, x.GetEnableMarketBuy())
	return offset
}

func (x *ExchangeCoin) fastWriteField11(buf []byte) (offset int) {
	if x.EnableMarketSell == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 11, x.GetEnableMarketSell())
	return offset
}

func (x *ExchangeCoin) fastWriteField12(buf []byte) (offset int) {
	if x.MinSellPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 12, x.GetMinSellPrice())
	return offset
}

func (x *ExchangeCoin) fastWriteField13(buf []byte) (offset int) {
	if x.Flag == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 13, x.GetFlag())
	return offset
}

func (x *ExchangeCoin) fastWriteField14(buf []byte) (offset int) {
	if x.MaxTradingOrder == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 14, x.GetMaxTradingOrder())
	return offset
}

func (x *ExchangeCoin) fastWriteField15(buf []byte) (offset int) {
	if x.MaxTradingTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 15, x.GetMaxTradingTime())
	return offset
}

func (x *ExchangeCoin) fastWriteField16(buf []byte) (offset int) {
	if x.MinTurnover == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 16, x.GetMinTurnover())
	return offset
}

func (x *ExchangeCoin) fastWriteField17(buf []byte) (offset int) {
	if x.ClearTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 17, x.GetClearTime())
	return offset
}

func (x *ExchangeCoin) fastWriteField18(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 18, x.GetEndTime())
	return offset
}

func (x *ExchangeCoin) fastWriteField19(buf []byte) (offset int) {
	if x.Exchangeable == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 19, x.GetExchangeable())
	return offset
}

func (x *ExchangeCoin) fastWriteField20(buf []byte) (offset int) {
	if x.MaxBuyPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 20, x.GetMaxBuyPrice())
	return offset
}

func (x *ExchangeCoin) fastWriteField21(buf []byte) (offset int) {
	if x.MaxVolume == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 21, x.GetMaxVolume())
	return offset
}

func (x *ExchangeCoin) fastWriteField22(buf []byte) (offset int) {
	if x.MinVolume == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 22, x.GetMinVolume())
	return offset
}

func (x *ExchangeCoin) fastWriteField23(buf []byte) (offset int) {
	if x.PublishAmount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 23, x.GetPublishAmount())
	return offset
}

func (x *ExchangeCoin) fastWriteField24(buf []byte) (offset int) {
	if x.PublishPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 24, x.GetPublishPrice())
	return offset
}

func (x *ExchangeCoin) fastWriteField25(buf []byte) (offset int) {
	if x.PublishType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 25, x.GetPublishType())
	return offset
}

func (x *ExchangeCoin) fastWriteField26(buf []byte) (offset int) {
	if x.RobotType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 26, x.GetRobotType())
	return offset
}

func (x *ExchangeCoin) fastWriteField27(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 27, x.GetStartTime())
	return offset
}

func (x *ExchangeCoin) fastWriteField28(buf []byte) (offset int) {
	if x.Visible == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 28, x.GetVisible())
	return offset
}

func (x *ExchangeCoin) fastWriteField29(buf []byte) (offset int) {
	if x.Zone == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 29, x.GetZone())
	return offset
}

func (x *Coin) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField19(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField24(buf[offset:])
	offset += x.fastWriteField25(buf[offset:])
	offset += x.fastWriteField26(buf[offset:])
	offset += x.fastWriteField27(buf[offset:])
	offset += x.fastWriteField28(buf[offset:])
	return offset
}

func (x *Coin) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Coin) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Coin) fastWriteField3(buf []byte) (offset int) {
	if x.CanAutoWithdraw == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetCanAutoWithdraw())
	return offset
}

func (x *Coin) fastWriteField4(buf []byte) (offset int) {
	if x.CanRecharge == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetCanRecharge())
	return offset
}

func (x *Coin) fastWriteField5(buf []byte) (offset int) {
	if x.CanTransfer == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, x.GetCanTransfer())
	return offset
}

func (x *Coin) fastWriteField6(buf []byte) (offset int) {
	if x.CanWithdraw == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, x.GetCanWithdraw())
	return offset
}

func (x *Coin) fastWriteField7(buf []byte) (offset int) {
	if x.CnyRate == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 7, x.GetCnyRate())
	return offset
}

func (x *Coin) fastWriteField8(buf []byte) (offset int) {
	if x.EnableRpc == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 8, x.GetEnableRpc())
	return offset
}

func (x *Coin) fastWriteField9(buf []byte) (offset int) {
	if x.IsPlatformCoin == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, x.GetIsPlatformCoin())
	return offset
}

func (x *Coin) fastWriteField10(buf []byte) (offset int) {
	if x.MaxTxFee == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 10, x.GetMaxTxFee())
	return offset
}

func (x *Coin) fastWriteField11(buf []byte) (offset int) {
	if x.MaxWithdrawAmount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 11, x.GetMaxWithdrawAmount())
	return offset
}

func (x *Coin) fastWriteField12(buf []byte) (offset int) {
	if x.MinTxFee == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 12, x.GetMinTxFee())
	return offset
}

func (x *Coin) fastWriteField13(buf []byte) (offset int) {
	if x.MinWithdrawAmount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 13, x.GetMinWithdrawAmount())
	return offset
}

func (x *Coin) fastWriteField14(buf []byte) (offset int) {
	if x.NameCn == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetNameCn())
	return offset
}

func (x *Coin) fastWriteField15(buf []byte) (offset int) {
	if x.Sort == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 15, x.GetSort())
	return offset
}

func (x *Coin) fastWriteField16(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 16, x.GetStatus())
	return offset
}

func (x *Coin) fastWriteField17(buf []byte) (offset int) {
	if x.Unit == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 17, x.GetUnit())
	return offset
}

func (x *Coin) fastWriteField18(buf []byte) (offset int) {
	if x.UsdRate == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 18, x.GetUsdRate())
	return offset
}

func (x *Coin) fastWriteField19(buf []byte) (offset int) {
	if x.WithdrawThreshold == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 19, x.GetWithdrawThreshold())
	return offset
}

func (x *Coin) fastWriteField20(buf []byte) (offset int) {
	if x.HasLegal == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 20, x.GetHasLegal())
	return offset
}

func (x *Coin) fastWriteField21(buf []byte) (offset int) {
	if x.ColdWalletAddress == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 21, x.GetColdWalletAddress())
	return offset
}

func (x *Coin) fastWriteField22(buf []byte) (offset int) {
	if x.MinerFee == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 22, x.GetMinerFee())
	return offset
}

func (x *Coin) fastWriteField23(buf []byte) (offset int) {
	if x.WithdrawScale == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 23, x.GetWithdrawScale())
	return offset
}

func (x *Coin) fastWriteField24(buf []byte) (offset int) {
	if x.AccountType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 24, x.GetAccountType())
	return offset
}

func (x *Coin) fastWriteField25(buf []byte) (offset int) {
	if x.DepositAddress == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 25, x.GetDepositAddress())
	return offset
}

func (x *Coin) fastWriteField26(buf []byte) (offset int) {
	if x.Infolink == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 26, x.GetInfolink())
	return offset
}

func (x *Coin) fastWriteField27(buf []byte) (offset int) {
	if x.Information == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 27, x.GetInformation())
	return offset
}

func (x *Coin) fastWriteField28(buf []byte) (offset int) {
	if x.MinRechargeAmount == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 28, x.GetMinRechargeAmount())
	return offset
}

func (x *History) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *History) fastWriteField1(buf []byte) (offset int) {
	if x.Time == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTime())
	return offset
}

func (x *History) fastWriteField2(buf []byte) (offset int) {
	if x.Open == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetOpen())
	return offset
}

func (x *History) fastWriteField3(buf []byte) (offset int) {
	if x.Close == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.GetClose())
	return offset
}

func (x *History) fastWriteField4(buf []byte) (offset int) {
	if x.High == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 4, x.GetHigh())
	return offset
}

func (x *History) fastWriteField5(buf []byte) (offset int) {
	if x.Low == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 5, x.GetLow())
	return offset
}

func (x *History) fastWriteField6(buf []byte) (offset int) {
	if x.Volume == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 6, x.GetVolume())
	return offset
}

func (x *HistoryRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *HistoryRes) fastWriteField1(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetList()[i])
	}
	return offset
}

func (x *ExchangeCoinRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ExchangeCoinRes) fastWriteField1(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetList()[i])
	}
	return offset
}

func (x *CoinList) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CoinList) fastWriteField1(buf []byte) (offset int) {
	if x.List == nil {
		return offset
	}
	for i := range x.GetList() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetList()[i])
	}
	return offset
}

func (x *RateReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RateReq) fastWriteField1(buf []byte) (offset int) {
	if x.Unit == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUnit())
	return offset
}

func (x *RateReq) fastWriteField2(buf []byte) (offset int) {
	if x.Ip == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetIp())
	return offset
}

func (x *RateRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RateRes) fastWriteField1(buf []byte) (offset int) {
	if x.Rate == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 1, x.GetRate())
	return offset
}

func (x *MarketReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *MarketReq) sizeField1() (n int) {
	if x.Ip == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetIp())
	return n
}

func (x *MarketReq) sizeField2() (n int) {
	if x.Symbol == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSymbol())
	return n
}

func (x *MarketReq) sizeField3() (n int) {
	if x.Unit == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUnit())
	return n
}

func (x *MarketReq) sizeField4() (n int) {
	if x.From == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetFrom())
	return n
}

func (x *MarketReq) sizeField5() (n int) {
	if x.To == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetTo())
	return n
}

func (x *MarketReq) sizeField6() (n int) {
	if x.Resolution == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetResolution())
	return n
}

func (x *MarketReq) sizeField7() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetId())
	return n
}

func (x *SymbolThumbRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SymbolThumbRes) sizeField1() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(1, x.GetList()[i])
	}
	return n
}

func (x *CoinThumb) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *CoinThumb) sizeField1() (n int) {
	if x.Symbol == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSymbol())
	return n
}

func (x *CoinThumb) sizeField2() (n int) {
	if x.Open == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetOpen())
	return n
}

func (x *CoinThumb) sizeField3() (n int) {
	if x.High == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.GetHigh())
	return n
}

func (x *CoinThumb) sizeField4() (n int) {
	if x.Low == 0 {
		return n
	}
	n += fastpb.SizeDouble(4, x.GetLow())
	return n
}

func (x *CoinThumb) sizeField5() (n int) {
	if x.Close == 0 {
		return n
	}
	n += fastpb.SizeDouble(5, x.GetClose())
	return n
}

func (x *CoinThumb) sizeField6() (n int) {
	if x.Chg == 0 {
		return n
	}
	n += fastpb.SizeDouble(6, x.GetChg())
	return n
}

func (x *CoinThumb) sizeField7() (n int) {
	if x.Change == 0 {
		return n
	}
	n += fastpb.SizeDouble(7, x.GetChange())
	return n
}

func (x *CoinThumb) sizeField8() (n int) {
	if x.Volume == 0 {
		return n
	}
	n += fastpb.SizeDouble(8, x.GetVolume())
	return n
}

func (x *CoinThumb) sizeField9() (n int) {
	if x.Turnover == 0 {
		return n
	}
	n += fastpb.SizeDouble(9, x.GetTurnover())
	return n
}

func (x *CoinThumb) sizeField10() (n int) {
	if x.LastDayClose == 0 {
		return n
	}
	n += fastpb.SizeDouble(10, x.GetLastDayClose())
	return n
}

func (x *CoinThumb) sizeField11() (n int) {
	if x.UsdRate == 0 {
		return n
	}
	n += fastpb.SizeDouble(11, x.GetUsdRate())
	return n
}

func (x *CoinThumb) sizeField12() (n int) {
	if x.BaseUsdRate == 0 {
		return n
	}
	n += fastpb.SizeDouble(12, x.GetBaseUsdRate())
	return n
}

func (x *CoinThumb) sizeField13() (n int) {
	if x.Zone == 0 {
		return n
	}
	n += fastpb.SizeDouble(13, x.GetZone())
	return n
}

func (x *CoinThumb) sizeField14() (n int) {
	if len(x.Trend) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(14, len(x.GetTrend()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeDouble(numTagOrKey, x.GetTrend()[numIdxOrVal])
			return n
		})
	return n
}

func (x *ExchangeCoin) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField19()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField23()
	n += x.sizeField24()
	n += x.sizeField25()
	n += x.sizeField26()
	n += x.sizeField27()
	n += x.sizeField28()
	n += x.sizeField29()
	return n
}

func (x *ExchangeCoin) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *ExchangeCoin) sizeField2() (n int) {
	if x.Symbol == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSymbol())
	return n
}

func (x *ExchangeCoin) sizeField3() (n int) {
	if x.BaseCoinScale == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetBaseCoinScale())
	return n
}

func (x *ExchangeCoin) sizeField4() (n int) {
	if x.BaseSymbol == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetBaseSymbol())
	return n
}

func (x *ExchangeCoin) sizeField5() (n int) {
	if x.CoinScale == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetCoinScale())
	return n
}

func (x *ExchangeCoin) sizeField6() (n int) {
	if x.CoinSymbol == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetCoinSymbol())
	return n
}

func (x *ExchangeCoin) sizeField7() (n int) {
	if x.Enable == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, x.GetEnable())
	return n
}

func (x *ExchangeCoin) sizeField8() (n int) {
	if x.Fee == 0 {
		return n
	}
	n += fastpb.SizeDouble(8, x.GetFee())
	return n
}

func (x *ExchangeCoin) sizeField9() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, x.GetSort())
	return n
}

func (x *ExchangeCoin) sizeField10() (n int) {
	if x.EnableMarketBuy == 0 {
		return n
	}
	n += fastpb.SizeInt32(10, x.GetEnableMarketBuy())
	return n
}

func (x *ExchangeCoin) sizeField11() (n int) {
	if x.EnableMarketSell == 0 {
		return n
	}
	n += fastpb.SizeInt32(11, x.GetEnableMarketSell())
	return n
}

func (x *ExchangeCoin) sizeField12() (n int) {
	if x.MinSellPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(12, x.GetMinSellPrice())
	return n
}

func (x *ExchangeCoin) sizeField13() (n int) {
	if x.Flag == 0 {
		return n
	}
	n += fastpb.SizeInt32(13, x.GetFlag())
	return n
}

func (x *ExchangeCoin) sizeField14() (n int) {
	if x.MaxTradingOrder == 0 {
		return n
	}
	n += fastpb.SizeInt32(14, x.GetMaxTradingOrder())
	return n
}

func (x *ExchangeCoin) sizeField15() (n int) {
	if x.MaxTradingTime == 0 {
		return n
	}
	n += fastpb.SizeInt32(15, x.GetMaxTradingTime())
	return n
}

func (x *ExchangeCoin) sizeField16() (n int) {
	if x.MinTurnover == 0 {
		return n
	}
	n += fastpb.SizeDouble(16, x.GetMinTurnover())
	return n
}

func (x *ExchangeCoin) sizeField17() (n int) {
	if x.ClearTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(17, x.GetClearTime())
	return n
}

func (x *ExchangeCoin) sizeField18() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(18, x.GetEndTime())
	return n
}

func (x *ExchangeCoin) sizeField19() (n int) {
	if x.Exchangeable == 0 {
		return n
	}
	n += fastpb.SizeInt32(19, x.GetExchangeable())
	return n
}

func (x *ExchangeCoin) sizeField20() (n int) {
	if x.MaxBuyPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(20, x.GetMaxBuyPrice())
	return n
}

func (x *ExchangeCoin) sizeField21() (n int) {
	if x.MaxVolume == 0 {
		return n
	}
	n += fastpb.SizeDouble(21, x.GetMaxVolume())
	return n
}

func (x *ExchangeCoin) sizeField22() (n int) {
	if x.MinVolume == 0 {
		return n
	}
	n += fastpb.SizeDouble(22, x.GetMinVolume())
	return n
}

func (x *ExchangeCoin) sizeField23() (n int) {
	if x.PublishAmount == 0 {
		return n
	}
	n += fastpb.SizeDouble(23, x.GetPublishAmount())
	return n
}

func (x *ExchangeCoin) sizeField24() (n int) {
	if x.PublishPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(24, x.GetPublishPrice())
	return n
}

func (x *ExchangeCoin) sizeField25() (n int) {
	if x.PublishType == 0 {
		return n
	}
	n += fastpb.SizeInt32(25, x.GetPublishType())
	return n
}

func (x *ExchangeCoin) sizeField26() (n int) {
	if x.RobotType == 0 {
		return n
	}
	n += fastpb.SizeInt32(26, x.GetRobotType())
	return n
}

func (x *ExchangeCoin) sizeField27() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(27, x.GetStartTime())
	return n
}

func (x *ExchangeCoin) sizeField28() (n int) {
	if x.Visible == 0 {
		return n
	}
	n += fastpb.SizeInt32(28, x.GetVisible())
	return n
}

func (x *ExchangeCoin) sizeField29() (n int) {
	if x.Zone == 0 {
		return n
	}
	n += fastpb.SizeInt32(29, x.GetZone())
	return n
}

func (x *Coin) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField19()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField23()
	n += x.sizeField24()
	n += x.sizeField25()
	n += x.sizeField26()
	n += x.sizeField27()
	n += x.sizeField28()
	return n
}

func (x *Coin) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetId())
	return n
}

func (x *Coin) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Coin) sizeField3() (n int) {
	if x.CanAutoWithdraw == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetCanAutoWithdraw())
	return n
}

func (x *Coin) sizeField4() (n int) {
	if x.CanRecharge == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetCanRecharge())
	return n
}

func (x *Coin) sizeField5() (n int) {
	if x.CanTransfer == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, x.GetCanTransfer())
	return n
}

func (x *Coin) sizeField6() (n int) {
	if x.CanWithdraw == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, x.GetCanWithdraw())
	return n
}

func (x *Coin) sizeField7() (n int) {
	if x.CnyRate == 0 {
		return n
	}
	n += fastpb.SizeDouble(7, x.GetCnyRate())
	return n
}

func (x *Coin) sizeField8() (n int) {
	if x.EnableRpc == 0 {
		return n
	}
	n += fastpb.SizeInt32(8, x.GetEnableRpc())
	return n
}

func (x *Coin) sizeField9() (n int) {
	if x.IsPlatformCoin == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, x.GetIsPlatformCoin())
	return n
}

func (x *Coin) sizeField10() (n int) {
	if x.MaxTxFee == 0 {
		return n
	}
	n += fastpb.SizeDouble(10, x.GetMaxTxFee())
	return n
}

func (x *Coin) sizeField11() (n int) {
	if x.MaxWithdrawAmount == 0 {
		return n
	}
	n += fastpb.SizeDouble(11, x.GetMaxWithdrawAmount())
	return n
}

func (x *Coin) sizeField12() (n int) {
	if x.MinTxFee == 0 {
		return n
	}
	n += fastpb.SizeDouble(12, x.GetMinTxFee())
	return n
}

func (x *Coin) sizeField13() (n int) {
	if x.MinWithdrawAmount == 0 {
		return n
	}
	n += fastpb.SizeDouble(13, x.GetMinWithdrawAmount())
	return n
}

func (x *Coin) sizeField14() (n int) {
	if x.NameCn == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetNameCn())
	return n
}

func (x *Coin) sizeField15() (n int) {
	if x.Sort == 0 {
		return n
	}
	n += fastpb.SizeInt32(15, x.GetSort())
	return n
}

func (x *Coin) sizeField16() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(16, x.GetStatus())
	return n
}

func (x *Coin) sizeField17() (n int) {
	if x.Unit == "" {
		return n
	}
	n += fastpb.SizeString(17, x.GetUnit())
	return n
}

func (x *Coin) sizeField18() (n int) {
	if x.UsdRate == 0 {
		return n
	}
	n += fastpb.SizeDouble(18, x.GetUsdRate())
	return n
}

func (x *Coin) sizeField19() (n int) {
	if x.WithdrawThreshold == 0 {
		return n
	}
	n += fastpb.SizeDouble(19, x.GetWithdrawThreshold())
	return n
}

func (x *Coin) sizeField20() (n int) {
	if x.HasLegal == 0 {
		return n
	}
	n += fastpb.SizeInt32(20, x.GetHasLegal())
	return n
}

func (x *Coin) sizeField21() (n int) {
	if x.ColdWalletAddress == "" {
		return n
	}
	n += fastpb.SizeString(21, x.GetColdWalletAddress())
	return n
}

func (x *Coin) sizeField22() (n int) {
	if x.MinerFee == 0 {
		return n
	}
	n += fastpb.SizeDouble(22, x.GetMinerFee())
	return n
}

func (x *Coin) sizeField23() (n int) {
	if x.WithdrawScale == 0 {
		return n
	}
	n += fastpb.SizeInt32(23, x.GetWithdrawScale())
	return n
}

func (x *Coin) sizeField24() (n int) {
	if x.AccountType == 0 {
		return n
	}
	n += fastpb.SizeInt32(24, x.GetAccountType())
	return n
}

func (x *Coin) sizeField25() (n int) {
	if x.DepositAddress == "" {
		return n
	}
	n += fastpb.SizeString(25, x.GetDepositAddress())
	return n
}

func (x *Coin) sizeField26() (n int) {
	if x.Infolink == "" {
		return n
	}
	n += fastpb.SizeString(26, x.GetInfolink())
	return n
}

func (x *Coin) sizeField27() (n int) {
	if x.Information == "" {
		return n
	}
	n += fastpb.SizeString(27, x.GetInformation())
	return n
}

func (x *Coin) sizeField28() (n int) {
	if x.MinRechargeAmount == 0 {
		return n
	}
	n += fastpb.SizeDouble(28, x.GetMinRechargeAmount())
	return n
}

func (x *History) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *History) sizeField1() (n int) {
	if x.Time == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTime())
	return n
}

func (x *History) sizeField2() (n int) {
	if x.Open == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetOpen())
	return n
}

func (x *History) sizeField3() (n int) {
	if x.Close == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.GetClose())
	return n
}

func (x *History) sizeField4() (n int) {
	if x.High == 0 {
		return n
	}
	n += fastpb.SizeDouble(4, x.GetHigh())
	return n
}

func (x *History) sizeField5() (n int) {
	if x.Low == 0 {
		return n
	}
	n += fastpb.SizeDouble(5, x.GetLow())
	return n
}

func (x *History) sizeField6() (n int) {
	if x.Volume == 0 {
		return n
	}
	n += fastpb.SizeDouble(6, x.GetVolume())
	return n
}

func (x *HistoryRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *HistoryRes) sizeField1() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(1, x.GetList()[i])
	}
	return n
}

func (x *ExchangeCoinRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ExchangeCoinRes) sizeField1() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(1, x.GetList()[i])
	}
	return n
}

func (x *CoinList) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CoinList) sizeField1() (n int) {
	if x.List == nil {
		return n
	}
	for i := range x.GetList() {
		n += fastpb.SizeMessage(1, x.GetList()[i])
	}
	return n
}

func (x *RateReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RateReq) sizeField1() (n int) {
	if x.Unit == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUnit())
	return n
}

func (x *RateReq) sizeField2() (n int) {
	if x.Ip == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetIp())
	return n
}

func (x *RateRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RateRes) sizeField1() (n int) {
	if x.Rate == 0 {
		return n
	}
	n += fastpb.SizeDouble(1, x.GetRate())
	return n
}

var fieldIDToName_MarketReq = map[int32]string{
	1: "Ip",
	2: "Symbol",
	3: "Unit",
	4: "From",
	5: "To",
	6: "Resolution",
	7: "Id",
}

var fieldIDToName_SymbolThumbRes = map[int32]string{
	1: "List",
}

var fieldIDToName_CoinThumb = map[int32]string{
	1:  "Symbol",
	2:  "Open",
	3:  "High",
	4:  "Low",
	5:  "Close",
	6:  "Chg",
	7:  "Change",
	8:  "Volume",
	9:  "Turnover",
	10: "LastDayClose",
	11: "UsdRate",
	12: "BaseUsdRate",
	13: "Zone",
	14: "Trend",
}

var fieldIDToName_ExchangeCoin = map[int32]string{
	1:  "Id",
	2:  "Symbol",
	3:  "BaseCoinScale",
	4:  "BaseSymbol",
	5:  "CoinScale",
	6:  "CoinSymbol",
	7:  "Enable",
	8:  "Fee",
	9:  "Sort",
	10: "EnableMarketBuy",
	11: "EnableMarketSell",
	12: "MinSellPrice",
	13: "Flag",
	14: "MaxTradingOrder",
	15: "MaxTradingTime",
	16: "MinTurnover",
	17: "ClearTime",
	18: "EndTime",
	19: "Exchangeable",
	20: "MaxBuyPrice",
	21: "MaxVolume",
	22: "MinVolume",
	23: "PublishAmount",
	24: "PublishPrice",
	25: "PublishType",
	26: "RobotType",
	27: "StartTime",
	28: "Visible",
	29: "Zone",
}

var fieldIDToName_Coin = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "CanAutoWithdraw",
	4:  "CanRecharge",
	5:  "CanTransfer",
	6:  "CanWithdraw",
	7:  "CnyRate",
	8:  "EnableRpc",
	9:  "IsPlatformCoin",
	10: "MaxTxFee",
	11: "MaxWithdrawAmount",
	12: "MinTxFee",
	13: "MinWithdrawAmount",
	14: "NameCn",
	15: "Sort",
	16: "Status",
	17: "Unit",
	18: "UsdRate",
	19: "WithdrawThreshold",
	20: "HasLegal",
	21: "ColdWalletAddress",
	22: "MinerFee",
	23: "WithdrawScale",
	24: "AccountType",
	25: "DepositAddress",
	26: "Infolink",
	27: "Information",
	28: "MinRechargeAmount",
}

var fieldIDToName_History = map[int32]string{
	1: "Time",
	2: "Open",
	3: "Close",
	4: "High",
	5: "Low",
	6: "Volume",
}

var fieldIDToName_HistoryRes = map[int32]string{
	1: "List",
}

var fieldIDToName_ExchangeCoinRes = map[int32]string{
	1: "List",
}

var fieldIDToName_CoinList = map[int32]string{
	1: "List",
}

var fieldIDToName_RateReq = map[int32]string{
	1: "Unit",
	2: "Ip",
}

var fieldIDToName_RateRes = map[int32]string{
	1: "Rate",
}
