// Code generated by Kitex v0.10.3. DO NOT EDIT.

package market

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	market "grpc_common/kitex_gen/market"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FindSymbolThumb(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.SymbolThumbRes, err error)
	FindSymbolThumbTrend(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.SymbolThumbRes, err error)
	FindSymbolInfo(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.ExchangeCoin, err error)
	FindCoinInfo(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.Coin, err error)
	HistoryKline(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.HistoryRes, err error)
	FindVisibleExchangeCoins(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.ExchangeCoinRes, err error)
	FindAllCoin(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.CoinList, err error)
	FindCoinById(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.Coin, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kMarketClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kMarketClient struct {
	*kClient
}

func (p *kMarketClient) FindSymbolThumb(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.SymbolThumbRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindSymbolThumb(ctx, Req)
}

func (p *kMarketClient) FindSymbolThumbTrend(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.SymbolThumbRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindSymbolThumbTrend(ctx, Req)
}

func (p *kMarketClient) FindSymbolInfo(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.ExchangeCoin, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindSymbolInfo(ctx, Req)
}

func (p *kMarketClient) FindCoinInfo(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.Coin, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindCoinInfo(ctx, Req)
}

func (p *kMarketClient) HistoryKline(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.HistoryRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HistoryKline(ctx, Req)
}

func (p *kMarketClient) FindVisibleExchangeCoins(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.ExchangeCoinRes, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindVisibleExchangeCoins(ctx, Req)
}

func (p *kMarketClient) FindAllCoin(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.CoinList, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindAllCoin(ctx, Req)
}

func (p *kMarketClient) FindCoinById(ctx context.Context, Req *market.MarketReq, callOptions ...callopt.Option) (r *market.Coin, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindCoinById(ctx, Req)
}
