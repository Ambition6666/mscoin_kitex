// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package ucenter

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *RegReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegReq[number], err)
}

func (x *RegReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v CaptchaReq
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Captcha = &v
	return offset, nil
}

func (x *RegReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Promotion, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Country, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.SuperPartner, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Ip, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CaptchaReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CaptchaReq[number], err)
}

func (x *CaptchaReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Server, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CaptchaReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *RegRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *LoginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginReq[number], err)
}

func (x *LoginReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v CaptchaReq
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Captcha = &v
	return offset, nil
}

func (x *LoginReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Ip, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *NoRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *CodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CodeReq[number], err)
}

func (x *CodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Country, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_LoginRes[number], err)
}

func (x *LoginRes) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Username, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Token, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.MemberLevel, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.RealName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Country, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.PromotionCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.LoginCount, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.SuperPartner, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *LoginRes) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.MemberRate, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *RegReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *RegReq) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *RegReq) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *RegReq) fastWriteField3(buf []byte) (offset int) {
	if x.Captcha == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetCaptcha())
	return offset
}

func (x *RegReq) fastWriteField4(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPhone())
	return offset
}

func (x *RegReq) fastWriteField5(buf []byte) (offset int) {
	if x.Promotion == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPromotion())
	return offset
}

func (x *RegReq) fastWriteField6(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetCode())
	return offset
}

func (x *RegReq) fastWriteField7(buf []byte) (offset int) {
	if x.Country == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetCountry())
	return offset
}

func (x *RegReq) fastWriteField8(buf []byte) (offset int) {
	if x.SuperPartner == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetSuperPartner())
	return offset
}

func (x *RegReq) fastWriteField9(buf []byte) (offset int) {
	if x.Ip == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetIp())
	return offset
}

func (x *CaptchaReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CaptchaReq) fastWriteField1(buf []byte) (offset int) {
	if x.Server == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetServer())
	return offset
}

func (x *CaptchaReq) fastWriteField2(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetToken())
	return offset
}

func (x *RegRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *LoginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *LoginReq) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *LoginReq) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *LoginReq) fastWriteField3(buf []byte) (offset int) {
	if x.Captcha == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetCaptcha())
	return offset
}

func (x *LoginReq) fastWriteField4(buf []byte) (offset int) {
	if x.Ip == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetIp())
	return offset
}

func (x *NoRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *CodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPhone())
	return offset
}

func (x *CodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.Country == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetCountry())
	return offset
}

func (x *LoginRes) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	return offset
}

func (x *LoginRes) fastWriteField1(buf []byte) (offset int) {
	if x.Username == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUsername())
	return offset
}

func (x *LoginRes) fastWriteField2(buf []byte) (offset int) {
	if x.Token == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetToken())
	return offset
}

func (x *LoginRes) fastWriteField3(buf []byte) (offset int) {
	if x.MemberLevel == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMemberLevel())
	return offset
}

func (x *LoginRes) fastWriteField4(buf []byte) (offset int) {
	if x.RealName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetRealName())
	return offset
}

func (x *LoginRes) fastWriteField5(buf []byte) (offset int) {
	if x.Country == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCountry())
	return offset
}

func (x *LoginRes) fastWriteField6(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetAvatar())
	return offset
}

func (x *LoginRes) fastWriteField7(buf []byte) (offset int) {
	if x.PromotionCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetPromotionCode())
	return offset
}

func (x *LoginRes) fastWriteField8(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetId())
	return offset
}

func (x *LoginRes) fastWriteField9(buf []byte) (offset int) {
	if x.LoginCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, x.GetLoginCount())
	return offset
}

func (x *LoginRes) fastWriteField10(buf []byte) (offset int) {
	if x.SuperPartner == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetSuperPartner())
	return offset
}

func (x *LoginRes) fastWriteField11(buf []byte) (offset int) {
	if x.MemberRate == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 11, x.GetMemberRate())
	return offset
}

func (x *RegReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *RegReq) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *RegReq) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *RegReq) sizeField3() (n int) {
	if x.Captcha == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetCaptcha())
	return n
}

func (x *RegReq) sizeField4() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPhone())
	return n
}

func (x *RegReq) sizeField5() (n int) {
	if x.Promotion == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetPromotion())
	return n
}

func (x *RegReq) sizeField6() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetCode())
	return n
}

func (x *RegReq) sizeField7() (n int) {
	if x.Country == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetCountry())
	return n
}

func (x *RegReq) sizeField8() (n int) {
	if x.SuperPartner == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetSuperPartner())
	return n
}

func (x *RegReq) sizeField9() (n int) {
	if x.Ip == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetIp())
	return n
}

func (x *CaptchaReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CaptchaReq) sizeField1() (n int) {
	if x.Server == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetServer())
	return n
}

func (x *CaptchaReq) sizeField2() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetToken())
	return n
}

func (x *RegRes) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *LoginReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *LoginReq) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *LoginReq) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *LoginReq) sizeField3() (n int) {
	if x.Captcha == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetCaptcha())
	return n
}

func (x *LoginReq) sizeField4() (n int) {
	if x.Ip == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetIp())
	return n
}

func (x *NoRes) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *CodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CodeReq) sizeField1() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPhone())
	return n
}

func (x *CodeReq) sizeField2() (n int) {
	if x.Country == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetCountry())
	return n
}

func (x *LoginRes) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	return n
}

func (x *LoginRes) sizeField1() (n int) {
	if x.Username == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUsername())
	return n
}

func (x *LoginRes) sizeField2() (n int) {
	if x.Token == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetToken())
	return n
}

func (x *LoginRes) sizeField3() (n int) {
	if x.MemberLevel == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMemberLevel())
	return n
}

func (x *LoginRes) sizeField4() (n int) {
	if x.RealName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetRealName())
	return n
}

func (x *LoginRes) sizeField5() (n int) {
	if x.Country == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCountry())
	return n
}

func (x *LoginRes) sizeField6() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetAvatar())
	return n
}

func (x *LoginRes) sizeField7() (n int) {
	if x.PromotionCode == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetPromotionCode())
	return n
}

func (x *LoginRes) sizeField8() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetId())
	return n
}

func (x *LoginRes) sizeField9() (n int) {
	if x.LoginCount == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, x.GetLoginCount())
	return n
}

func (x *LoginRes) sizeField10() (n int) {
	if x.SuperPartner == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetSuperPartner())
	return n
}

func (x *LoginRes) sizeField11() (n int) {
	if x.MemberRate == 0 {
		return n
	}
	n += fastpb.SizeInt32(11, x.GetMemberRate())
	return n
}

var fieldIDToName_RegReq = map[int32]string{
	1: "Username",
	2: "Password",
	3: "Captcha",
	4: "Phone",
	5: "Promotion",
	6: "Code",
	7: "Country",
	8: "SuperPartner",
	9: "Ip",
}

var fieldIDToName_CaptchaReq = map[int32]string{
	1: "Server",
	2: "Token",
}

var fieldIDToName_RegRes = map[int32]string{}

var fieldIDToName_LoginReq = map[int32]string{
	1: "Username",
	2: "Password",
	3: "Captcha",
	4: "Ip",
}

var fieldIDToName_NoRes = map[int32]string{}

var fieldIDToName_CodeReq = map[int32]string{
	1: "Phone",
	2: "Country",
}

var fieldIDToName_LoginRes = map[int32]string{
	1:  "Username",
	2:  "Token",
	3:  "MemberLevel",
	4:  "RealName",
	5:  "Country",
	6:  "Avatar",
	7:  "PromotionCode",
	8:  "Id",
	9:  "LoginCount",
	10: "SuperPartner",
	11: "MemberRate",
}
