// Code generated by hertz generator.

package handler

import (
	"common/results"
	"context"
	"github.com/cloudwego/kitex/pkg/klog"
	"github.com/jinzhu/copier"
	"grpc_common/kitex_gen/market"
	processor2 "market_api/processor"
	"market_api/rpc"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	model "market_api/biz/model"
)

// SymbolThumbTrend .
// @router /market/symbol-thumb-trend [POST]
func SymbolThumbTrend(ctx context.Context, c *app.RequestContext) {
	var err error
	var req model.MarketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	processor := processor2.GetDefaultProcessor()
	thumb := processor.GetThumb()
	var list []*market.CoinThumb
	isCache := false
	if thumb != nil {
		m := thumb.(map[string]*market.CoinThumb)
		if len(m) > 0 {
			list = make([]*market.CoinThumb, len(m))
			i := 0
			for _, v := range m {
				list[i] = v
				i++
			}
			isCache = true
		}
	}

	marketReq := new(market.MarketReq)
	err = copier.Copy(marketReq, &req)
	if err != nil {
		klog.Error("SymbolThumbTrend数据格式有误")
		results.NewResult().Deal(nil, err, c)
		return
	}
	if !isCache {
		marketRes, err := rpc.GetMarketClient().FindSymbolThumbTrend(ctx, marketReq)
		if err != nil {
			results.NewResult().Deal(nil, err, c)
			return
		}
		list = marketRes.List
		processor.PutThumb(list)
	}
	resp := new(model.MarketResp)
	if err := copier.Copy(&resp.List, list); err != nil {
		klog.Error("SymbolThumbTrend数据格式有误")
		results.NewResult().Deal(nil, err, c)
		return
	}
	for _, v := range resp.List {
		if v.Trend == nil {
			v.Trend = []float64{}
		}
	}

	results.NewResult().Deal(resp, nil, c)
}

// SymbolThumb .
// @router /market/symbol-thumb [POST]
func SymbolThumb(ctx context.Context, c *app.RequestContext) {
	var err error
	var req model.MarketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	processor := processor2.GetDefaultProcessor()
	thumb := processor.GetThumb()
	var list []*market.CoinThumb
	isCache := false
	if thumb != nil {
		m := thumb.(map[string]*market.CoinThumb)
		if len(m) > 0 {
			list = make([]*market.CoinThumb, len(m))
			i := 0
			for _, v := range m {
				list[i] = v
				i++
			}
			isCache = true
		}
	}

	marketReq := new(market.MarketReq)
	err = copier.Copy(marketReq, &req)
	if err != nil {
		klog.Error("SymbolThumb数据格式有误")
		results.NewResult().Deal(nil, err, c)
		return
	}
	if !isCache {
		marketRes, err := rpc.GetMarketClient().FindSymbolThumb(ctx, marketReq)
		if err != nil {
			results.NewResult().Deal(nil, err, c)
			return
		}
		list = marketRes.List
		processor.PutThumb(list)
	}
	resp := new(model.MarketResp)
	if err := copier.Copy(&resp.List, list); err != nil {
		klog.Error("SymbolThumb数据格式有误")
		results.NewResult().Deal(nil, err, c)
		return
	}
	for _, v := range resp.List {
		if v.Trend == nil {
			v.Trend = []float64{}
		}
	}

	results.NewResult().Deal(resp, nil, c)
}

// SymbolInfo .
// @router /market/symbol-info [POST]
func SymbolInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req model.MarketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	marketReq := new(market.MarketReq)
	err = copier.Copy(marketReq, &req)
	if err != nil {
		klog.Error("symbolinfo数据格式错误")
		results.NewResult().Deal(nil, err, c)
		return
	}

	resp := new(model.ExchangeCoinResp)
	ExchangeCoin, err := rpc.GetMarketClient().FindSymbolInfo(ctx, marketReq)
	if err != nil {
		results.NewResult().Deal(nil, err, c)
		return
	}

	err = copier.Copy(resp, ExchangeCoin)
	if err != nil {
		klog.Error("symbolinfo数据格式错误")
		results.NewResult().Deal(nil, err, c)
		return
	}

	resp.CurrentTime = time.Now().UnixMilli()
	results.NewResult().Deal(resp, nil, c)

}

// CoinInfo .
// @router /market/coin-info [POST]
func CoinInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req model.MarketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	marketReq := new(market.MarketReq)
	err = copier.Copy(marketReq, &req)
	if err != nil {
		klog.Error("coininfo数据格式错误")
		results.NewResult().Deal(nil, err, c)
		return
	}
	info, err := rpc.GetMarketClient().FindCoinInfo(ctx, marketReq)
	if err != nil {
		return
	}
	resp := new(model.Coin)
	err = copier.Copy(resp, info)
	if err != nil {
		klog.Error("coininfo数据格式错误")
		results.NewResult().Deal(nil, err, c)
		return
	}

	results.NewResult().Deal(resp, nil, c)
}

// History .
// @router /market/history [GET]
func History(ctx context.Context, c *app.RequestContext) {
	var err error
	var req model.MarketReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	marketReq := new(market.MarketReq)
	copier.Copy(marketReq, &req)
	kline, err := rpc.GetMarketClient().HistoryKline(ctx, marketReq)
	if err != nil {
		klog.Error("history数据格式错误")
		results.NewResult().Deal(nil, err, c)
		return
	}
	histories := kline.List
	resp := make([][]any, 0)
	for i, v := range histories {
		content := make([]any, 6)
		content[0] = v.Time
		content[1] = v.Open
		content[2] = v.High
		content[3] = v.Low
		content[4] = v.Close
		content[5] = v.Volume
		resp[i] = content
	}
	results.NewResult().Deal(resp, nil, c)
}
