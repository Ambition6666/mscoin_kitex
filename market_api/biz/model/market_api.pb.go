// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v4.24.0--rc2
// source: market_api.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "market_api/biz/model/api"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit string `protobuf:"bytes,1,opt,name=unit,proto3" form:"unit" json:"unit,omitempty" query:"unit"`
	Ip   string `protobuf:"bytes,2,opt,name=ip,proto3" form:"ip" json:"ip,omitempty" query:"ip"`
}

func (x *RateRequest) Reset() {
	*x = RateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateRequest) ProtoMessage() {}

func (x *RateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateRequest.ProtoReflect.Descriptor instead.
func (*RateRequest) Descriptor() ([]byte, []int) {
	return file_market_api_proto_rawDescGZIP(), []int{0}
}

func (x *RateRequest) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *RateRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type RateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate float64 `protobuf:"fixed64,1,opt,name=rate,proto3" form:"rate" json:"rate,omitempty" query:"rate"`
}

func (x *RateResponse) Reset() {
	*x = RateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateResponse) ProtoMessage() {}

func (x *RateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateResponse.ProtoReflect.Descriptor instead.
func (*RateResponse) Descriptor() ([]byte, []int) {
	return file_market_api_proto_rawDescGZIP(), []int{1}
}

func (x *RateResponse) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type CoinThumbResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol       string    `protobuf:"bytes,1,opt,name=symbol,proto3" form:"symbol" json:"symbol,omitempty" query:"symbol"`
	Open         float64   `protobuf:"fixed64,2,opt,name=open,proto3" form:"open" json:"open,omitempty" query:"open"`
	High         float64   `protobuf:"fixed64,3,opt,name=high,proto3" form:"high" json:"high,omitempty" query:"high"`
	Low          float64   `protobuf:"fixed64,4,opt,name=low,proto3" form:"low" json:"low,omitempty" query:"low"`
	Close        float64   `protobuf:"fixed64,5,opt,name=close,proto3" form:"close" json:"close,omitempty" query:"close"`
	Chg          float64   `protobuf:"fixed64,6,opt,name=chg,proto3" form:"chg" json:"chg,omitempty" query:"chg"`
	Change       float64   `protobuf:"fixed64,7,opt,name=change,proto3" form:"change" json:"change,omitempty" query:"change"`
	Volume       float64   `protobuf:"fixed64,8,opt,name=volume,proto3" form:"volume" json:"volume,omitempty" query:"volume"`
	Turnover     float64   `protobuf:"fixed64,9,opt,name=turnover,proto3" form:"turnover" json:"turnover,omitempty" query:"turnover"`
	LastDayClose float64   `protobuf:"fixed64,10,opt,name=last_day_close,json=lastDayClose,proto3" form:"last_day_close" json:"last_day_close,omitempty" query:"last_day_close"`
	UsdRate      float64   `protobuf:"fixed64,11,opt,name=usd_rate,json=usdRate,proto3" form:"usd_rate" json:"usd_rate,omitempty" query:"usd_rate"`
	BaseUsdRate  float64   `protobuf:"fixed64,12,opt,name=base_usd_rate,json=baseUsdRate,proto3" form:"base_usd_rate" json:"base_usd_rate,omitempty" query:"base_usd_rate"`
	Zone         int32     `protobuf:"varint,13,opt,name=zone,proto3" form:"zone" json:"zone,omitempty" query:"zone"`
	Trend        []float64 `protobuf:"fixed64,14,rep,packed,name=trend,proto3" form:"trend" json:"trend,omitempty" query:"trend"`
}

func (x *CoinThumbResp) Reset() {
	*x = CoinThumbResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinThumbResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinThumbResp) ProtoMessage() {}

func (x *CoinThumbResp) ProtoReflect() protoreflect.Message {
	mi := &file_market_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinThumbResp.ProtoReflect.Descriptor instead.
func (*CoinThumbResp) Descriptor() ([]byte, []int) {
	return file_market_api_proto_rawDescGZIP(), []int{2}
}

func (x *CoinThumbResp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CoinThumbResp) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *CoinThumbResp) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *CoinThumbResp) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *CoinThumbResp) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *CoinThumbResp) GetChg() float64 {
	if x != nil {
		return x.Chg
	}
	return 0
}

func (x *CoinThumbResp) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *CoinThumbResp) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CoinThumbResp) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *CoinThumbResp) GetLastDayClose() float64 {
	if x != nil {
		return x.LastDayClose
	}
	return 0
}

func (x *CoinThumbResp) GetUsdRate() float64 {
	if x != nil {
		return x.UsdRate
	}
	return 0
}

func (x *CoinThumbResp) GetBaseUsdRate() float64 {
	if x != nil {
		return x.BaseUsdRate
	}
	return 0
}

func (x *CoinThumbResp) GetZone() int32 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *CoinThumbResp) GetTrend() []float64 {
	if x != nil {
		return x.Trend
	}
	return nil
}

type MarketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip         string `protobuf:"bytes,1,opt,name=ip,proto3" form:"ip" json:"ip,omitempty" query:"ip"`
	Symbol     string `protobuf:"bytes,2,opt,name=symbol,proto3" form:"symbol" json:"symbol,omitempty" query:"symbol"`
	Unit       string `protobuf:"bytes,3,opt,name=unit,proto3" form:"unit" json:"unit,omitempty" query:"unit"`
	From       int64  `protobuf:"varint,4,opt,name=from,proto3" form:"from" json:"from,omitempty" query:"from"`
	To         int64  `protobuf:"varint,5,opt,name=to,proto3" form:"to" json:"to,omitempty" query:"to"`
	Resolution string `protobuf:"bytes,6,opt,name=resolution,proto3" form:"resolution" json:"resolution,omitempty" query:"resolution"`
}

func (x *MarketReq) Reset() {
	*x = MarketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketReq) ProtoMessage() {}

func (x *MarketReq) ProtoReflect() protoreflect.Message {
	mi := &file_market_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketReq.ProtoReflect.Descriptor instead.
func (*MarketReq) Descriptor() ([]byte, []int) {
	return file_market_api_proto_rawDescGZIP(), []int{3}
}

func (x *MarketReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MarketReq) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MarketReq) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *MarketReq) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *MarketReq) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

type ExchangeCoinResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int64   `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id,omitempty" query:"id"`
	Symbol             string  `protobuf:"bytes,2,opt,name=symbol,proto3" form:"symbol" json:"symbol,omitempty" query:"symbol"`
	BaseCoinScale      int64   `protobuf:"varint,3,opt,name=base_coin_scale,json=baseCoinScale,proto3" form:"base_coin_scale" json:"base_coin_scale,omitempty" query:"base_coin_scale"`
	BaseSymbol         string  `protobuf:"bytes,4,opt,name=base_symbol,json=baseSymbol,proto3" form:"base_symbol" json:"base_symbol,omitempty" query:"base_symbol"`
	CoinScale          int64   `protobuf:"varint,5,opt,name=coin_scale,json=coinScale,proto3" form:"coin_scale" json:"coin_scale,omitempty" query:"coin_scale"`
	CoinSymbol         string  `protobuf:"bytes,6,opt,name=coin_symbol,json=coinSymbol,proto3" form:"coin_symbol" json:"coin_symbol,omitempty" query:"coin_symbol"`
	Enable             int64   `protobuf:"varint,7,opt,name=enable,proto3" form:"enable" json:"enable,omitempty" query:"enable"`
	Fee                float64 `protobuf:"fixed64,8,opt,name=fee,proto3" form:"fee" json:"fee,omitempty" query:"fee"`
	Sort               int64   `protobuf:"varint,9,opt,name=sort,proto3" form:"sort" json:"sort,omitempty" query:"sort"`
	EnableMarketBuy    int64   `protobuf:"varint,10,opt,name=enable_market_buy,json=enableMarketBuy,proto3" form:"enable_market_buy" json:"enable_market_buy,omitempty" query:"enable_market_buy"`
	EnableMarketSell   int64   `protobuf:"varint,11,opt,name=enable_market_sell,json=enableMarketSell,proto3" form:"enable_market_sell" json:"enable_market_sell,omitempty" query:"enable_market_sell"`
	MinSellPrice       float64 `protobuf:"fixed64,12,opt,name=min_sell_price,json=minSellPrice,proto3" form:"min_sell_price" json:"min_sell_price,omitempty" query:"min_sell_price"`
	Flag               int64   `protobuf:"varint,13,opt,name=flag,proto3" form:"flag" json:"flag,omitempty" query:"flag"`
	MaxTradingOrder    int64   `protobuf:"varint,14,opt,name=max_trading_order,json=maxTradingOrder,proto3" form:"max_trading_order" json:"max_trading_order,omitempty" query:"max_trading_order"`
	MaxTradingTime     int64   `protobuf:"varint,15,opt,name=max_trading_time,json=maxTradingTime,proto3" form:"max_trading_time" json:"max_trading_time,omitempty" query:"max_trading_time"`
	MinTurnover        float64 `protobuf:"fixed64,16,opt,name=min_turnover,json=minTurnover,proto3" form:"min_turnover" json:"min_turnover,omitempty" query:"min_turnover"`
	ClearTime          int64   `protobuf:"varint,17,opt,name=clear_time,json=clearTime,proto3" form:"clear_time" json:"clear_time,omitempty" query:"clear_time"`
	EndTime            int64   `protobuf:"varint,18,opt,name=end_time,json=endTime,proto3" form:"end_time" json:"end_time,omitempty" query:"end_time"`
	Exchangeable       int64   `protobuf:"varint,19,opt,name=exchangeable,proto3" form:"exchangeable" json:"exchangeable,omitempty" query:"exchangeable"`
	MaxBuyPrice        float64 `protobuf:"fixed64,20,opt,name=max_buy_price,json=maxBuyPrice,proto3" form:"max_buy_price" json:"max_buy_price,omitempty" query:"max_buy_price"`
	MaxVolume          float64 `protobuf:"fixed64,21,opt,name=max_volume,json=maxVolume,proto3" form:"max_volume" json:"max_volume,omitempty" query:"max_volume"`
	MinVolume          float64 `protobuf:"fixed64,22,opt,name=min_volume,json=minVolume,proto3" form:"min_volume" json:"min_volume,omitempty" query:"min_volume"`
	PublishAmount      float64 `protobuf:"fixed64,23,opt,name=publish_amount,json=publishAmount,proto3" form:"publish_amount" json:"publish_amount,omitempty" query:"publish_amount"`
	PublishPrice       float64 `protobuf:"fixed64,24,opt,name=publish_price,json=publishPrice,proto3" form:"publish_price" json:"publish_price,omitempty" query:"publish_price"`
	PublishType        int64   `protobuf:"varint,25,opt,name=publish_type,json=publishType,proto3" form:"publish_type" json:"publish_type,omitempty" query:"publish_type"`
	RobotType          int64   `protobuf:"varint,26,opt,name=robot_type,json=robotType,proto3" form:"robot_type" json:"robot_type,omitempty" query:"robot_type"`
	StartTime          int64   `protobuf:"varint,27,opt,name=start_time,json=startTime,proto3" form:"start_time" json:"start_time,omitempty" query:"start_time"`
	Visible            int64   `protobuf:"varint,28,opt,name=visible,proto3" form:"visible" json:"visible,omitempty" query:"visible"`
	Zone               int64   `protobuf:"varint,29,opt,name=zone,proto3" form:"zone" json:"zone,omitempty" query:"zone"`
	CurrentTime        int64   `protobuf:"varint,30,opt,name=current_time,json=currentTime,proto3" form:"current_time" json:"current_time,omitempty" query:"current_time"`
	MarketEngineStatus int32   `protobuf:"varint,31,opt,name=market_engine_status,json=marketEngineStatus,proto3" form:"market_engine_status" json:"market_engine_status,omitempty" query:"market_engine_status"`
	EngineStatus       int32   `protobuf:"varint,32,opt,name=engine_status,json=engineStatus,proto3" form:"engine_status" json:"engine_status,omitempty" query:"engine_status"`
	ExEngineStatus     int32   `protobuf:"varint,33,opt,name=ex_engine_status,json=exEngineStatus,proto3" form:"ex_engine_status" json:"ex_engine_status,omitempty" query:"ex_engine_status"`
}

func (x *ExchangeCoinResp) Reset() {
	*x = ExchangeCoinResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeCoinResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeCoinResp) ProtoMessage() {}

func (x *ExchangeCoinResp) ProtoReflect() protoreflect.Message {
	mi := &file_market_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeCoinResp.ProtoReflect.Descriptor instead.
func (*ExchangeCoinResp) Descriptor() ([]byte, []int) {
	return file_market_api_proto_rawDescGZIP(), []int{4}
}

func (x *ExchangeCoinResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeCoinResp) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ExchangeCoinResp) GetBaseCoinScale() int64 {
	if x != nil {
		return x.BaseCoinScale
	}
	return 0
}

func (x *ExchangeCoinResp) GetBaseSymbol() string {
	if x != nil {
		return x.BaseSymbol
	}
	return ""
}

func (x *ExchangeCoinResp) GetCoinScale() int64 {
	if x != nil {
		return x.CoinScale
	}
	return 0
}

func (x *ExchangeCoinResp) GetCoinSymbol() string {
	if x != nil {
		return x.CoinSymbol
	}
	return ""
}

func (x *ExchangeCoinResp) GetEnable() int64 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *ExchangeCoinResp) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *ExchangeCoinResp) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ExchangeCoinResp) GetEnableMarketBuy() int64 {
	if x != nil {
		return x.EnableMarketBuy
	}
	return 0
}

func (x *ExchangeCoinResp) GetEnableMarketSell() int64 {
	if x != nil {
		return x.EnableMarketSell
	}
	return 0
}

func (x *ExchangeCoinResp) GetMinSellPrice() float64 {
	if x != nil {
		return x.MinSellPrice
	}
	return 0
}

func (x *ExchangeCoinResp) GetFlag() int64 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *ExchangeCoinResp) GetMaxTradingOrder() int64 {
	if x != nil {
		return x.MaxTradingOrder
	}
	return 0
}

func (x *ExchangeCoinResp) GetMaxTradingTime() int64 {
	if x != nil {
		return x.MaxTradingTime
	}
	return 0
}

func (x *ExchangeCoinResp) GetMinTurnover() float64 {
	if x != nil {
		return x.MinTurnover
	}
	return 0
}

func (x *ExchangeCoinResp) GetClearTime() int64 {
	if x != nil {
		return x.ClearTime
	}
	return 0
}

func (x *ExchangeCoinResp) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ExchangeCoinResp) GetExchangeable() int64 {
	if x != nil {
		return x.Exchangeable
	}
	return 0
}

func (x *ExchangeCoinResp) GetMaxBuyPrice() float64 {
	if x != nil {
		return x.MaxBuyPrice
	}
	return 0
}

func (x *ExchangeCoinResp) GetMaxVolume() float64 {
	if x != nil {
		return x.MaxVolume
	}
	return 0
}

func (x *ExchangeCoinResp) GetMinVolume() float64 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *ExchangeCoinResp) GetPublishAmount() float64 {
	if x != nil {
		return x.PublishAmount
	}
	return 0
}

func (x *ExchangeCoinResp) GetPublishPrice() float64 {
	if x != nil {
		return x.PublishPrice
	}
	return 0
}

func (x *ExchangeCoinResp) GetPublishType() int64 {
	if x != nil {
		return x.PublishType
	}
	return 0
}

func (x *ExchangeCoinResp) GetRobotType() int64 {
	if x != nil {
		return x.RobotType
	}
	return 0
}

func (x *ExchangeCoinResp) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ExchangeCoinResp) GetVisible() int64 {
	if x != nil {
		return x.Visible
	}
	return 0
}

func (x *ExchangeCoinResp) GetZone() int64 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *ExchangeCoinResp) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *ExchangeCoinResp) GetMarketEngineStatus() int32 {
	if x != nil {
		return x.MarketEngineStatus
	}
	return 0
}

func (x *ExchangeCoinResp) GetEngineStatus() int32 {
	if x != nil {
		return x.EngineStatus
	}
	return 0
}

func (x *ExchangeCoinResp) GetExEngineStatus() int32 {
	if x != nil {
		return x.ExEngineStatus
	}
	return 0
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32   `protobuf:"varint,1,opt,name=id,proto3" form:"id" json:"id,omitempty" query:"id"`
	Name              string  `protobuf:"bytes,2,opt,name=name,proto3" form:"name" json:"name,omitempty" query:"name"`
	CanAutoWithdraw   int32   `protobuf:"varint,3,opt,name=can_auto_withdraw,json=canAutoWithdraw,proto3" form:"can_auto_withdraw" json:"can_auto_withdraw,omitempty" query:"can_auto_withdraw"`
	CanRecharge       int32   `protobuf:"varint,4,opt,name=can_recharge,json=canRecharge,proto3" form:"can_recharge" json:"can_recharge,omitempty" query:"can_recharge"`
	CanTransfer       int32   `protobuf:"varint,5,opt,name=can_transfer,json=canTransfer,proto3" form:"can_transfer" json:"can_transfer,omitempty" query:"can_transfer"`
	CanWithdraw       int32   `protobuf:"varint,6,opt,name=can_withdraw,json=canWithdraw,proto3" form:"can_withdraw" json:"can_withdraw,omitempty" query:"can_withdraw"`
	CnyRate           float64 `protobuf:"fixed64,7,opt,name=cny_rate,json=cnyRate,proto3" form:"cny_rate" json:"cny_rate,omitempty" query:"cny_rate"`
	EnableRpc         int32   `protobuf:"varint,8,opt,name=enable_rpc,json=enableRpc,proto3" form:"enable_rpc" json:"enable_rpc,omitempty" query:"enable_rpc"`
	IsPlatformCoin    int32   `protobuf:"varint,9,opt,name=is_platform_coin,json=isPlatformCoin,proto3" form:"is_platform_coin" json:"is_platform_coin,omitempty" query:"is_platform_coin"`
	MaxTxFee          float64 `protobuf:"fixed64,10,opt,name=max_tx_fee,json=maxTxFee,proto3" form:"max_tx_fee" json:"max_tx_fee,omitempty" query:"max_tx_fee"`
	MaxWithdrawAmount float64 `protobuf:"fixed64,11,opt,name=max_withdraw_amount,json=maxWithdrawAmount,proto3" form:"max_withdraw_amount" json:"max_withdraw_amount,omitempty" query:"max_withdraw_amount"`
	MinTxFee          float64 `protobuf:"fixed64,12,opt,name=min_tx_fee,json=minTxFee,proto3" form:"min_tx_fee" json:"min_tx_fee,omitempty" query:"min_tx_fee"`
	MinWithdrawAmount float64 `protobuf:"fixed64,13,opt,name=min_withdraw_amount,json=minWithdrawAmount,proto3" form:"min_withdraw_amount" json:"min_withdraw_amount,omitempty" query:"min_withdraw_amount"`
	NameCn            string  `protobuf:"bytes,14,opt,name=name_cn,json=nameCn,proto3" form:"name_cn" json:"name_cn,omitempty" query:"name_cn"`
	Sort              int32   `protobuf:"varint,15,opt,name=sort,proto3" form:"sort" json:"sort,omitempty" query:"sort"`
	Status            int32   `protobuf:"varint,16,opt,name=status,proto3" form:"status" json:"status,omitempty" query:"status"`
	Unit              string  `protobuf:"bytes,17,opt,name=unit,proto3" form:"unit" json:"unit,omitempty" query:"unit"`
	UsdRate           float64 `protobuf:"fixed64,18,opt,name=usd_rate,json=usdRate,proto3" form:"usd_rate" json:"usd_rate,omitempty" query:"usd_rate"`
	WithdrawThreshold float64 `protobuf:"fixed64,19,opt,name=withdraw_threshold,json=withdrawThreshold,proto3" form:"withdraw_threshold" json:"withdraw_threshold,omitempty" query:"withdraw_threshold"`
	HasLegal          int32   `protobuf:"varint,20,opt,name=has_legal,json=hasLegal,proto3" form:"has_legal" json:"has_legal,omitempty" query:"has_legal"`
	ColdWalletAddress string  `protobuf:"bytes,21,opt,name=cold_wallet_address,json=coldWalletAddress,proto3" form:"cold_wallet_address" json:"cold_wallet_address,omitempty" query:"cold_wallet_address"`
	MinerFee          float64 `protobuf:"fixed64,22,opt,name=miner_fee,json=minerFee,proto3" form:"miner_fee" json:"miner_fee,omitempty" query:"miner_fee"`
	WithdrawScale     int32   `protobuf:"varint,23,opt,name=withdraw_scale,json=withdrawScale,proto3" form:"withdraw_scale" json:"withdraw_scale,omitempty" query:"withdraw_scale"`
	AccountType       int32   `protobuf:"varint,24,opt,name=account_type,json=accountType,proto3" form:"account_type" json:"account_type,omitempty" query:"account_type"`
	DepositAddress    string  `protobuf:"bytes,25,opt,name=deposit_address,json=depositAddress,proto3" form:"deposit_address" json:"deposit_address,omitempty" query:"deposit_address"`
	Infolink          string  `protobuf:"bytes,26,opt,name=infolink,proto3" form:"infolink" json:"infolink,omitempty" query:"infolink"`
	Information       string  `protobuf:"bytes,27,opt,name=information,proto3" form:"information" json:"information,omitempty" query:"information"`
	MinRechargeAmount float64 `protobuf:"fixed64,28,opt,name=min_recharge_amount,json=minRechargeAmount,proto3" form:"min_recharge_amount" json:"min_recharge_amount,omitempty" query:"min_recharge_amount"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_market_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_market_api_proto_rawDescGZIP(), []int{5}
}

func (x *Coin) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetCanAutoWithdraw() int32 {
	if x != nil {
		return x.CanAutoWithdraw
	}
	return 0
}

func (x *Coin) GetCanRecharge() int32 {
	if x != nil {
		return x.CanRecharge
	}
	return 0
}

func (x *Coin) GetCanTransfer() int32 {
	if x != nil {
		return x.CanTransfer
	}
	return 0
}

func (x *Coin) GetCanWithdraw() int32 {
	if x != nil {
		return x.CanWithdraw
	}
	return 0
}

func (x *Coin) GetCnyRate() float64 {
	if x != nil {
		return x.CnyRate
	}
	return 0
}

func (x *Coin) GetEnableRpc() int32 {
	if x != nil {
		return x.EnableRpc
	}
	return 0
}

func (x *Coin) GetIsPlatformCoin() int32 {
	if x != nil {
		return x.IsPlatformCoin
	}
	return 0
}

func (x *Coin) GetMaxTxFee() float64 {
	if x != nil {
		return x.MaxTxFee
	}
	return 0
}

func (x *Coin) GetMaxWithdrawAmount() float64 {
	if x != nil {
		return x.MaxWithdrawAmount
	}
	return 0
}

func (x *Coin) GetMinTxFee() float64 {
	if x != nil {
		return x.MinTxFee
	}
	return 0
}

func (x *Coin) GetMinWithdrawAmount() float64 {
	if x != nil {
		return x.MinWithdrawAmount
	}
	return 0
}

func (x *Coin) GetNameCn() string {
	if x != nil {
		return x.NameCn
	}
	return ""
}

func (x *Coin) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Coin) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Coin) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Coin) GetUsdRate() float64 {
	if x != nil {
		return x.UsdRate
	}
	return 0
}

func (x *Coin) GetWithdrawThreshold() float64 {
	if x != nil {
		return x.WithdrawThreshold
	}
	return 0
}

func (x *Coin) GetHasLegal() int32 {
	if x != nil {
		return x.HasLegal
	}
	return 0
}

func (x *Coin) GetColdWalletAddress() string {
	if x != nil {
		return x.ColdWalletAddress
	}
	return ""
}

func (x *Coin) GetMinerFee() float64 {
	if x != nil {
		return x.MinerFee
	}
	return 0
}

func (x *Coin) GetWithdrawScale() int32 {
	if x != nil {
		return x.WithdrawScale
	}
	return 0
}

func (x *Coin) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *Coin) GetDepositAddress() string {
	if x != nil {
		return x.DepositAddress
	}
	return ""
}

func (x *Coin) GetInfolink() string {
	if x != nil {
		return x.Infolink
	}
	return ""
}

func (x *Coin) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *Coin) GetMinRechargeAmount() float64 {
	if x != nil {
		return x.MinRechargeAmount
	}
	return 0
}

type MarketResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CoinThumbResp `protobuf:"bytes,1,rep,name=list,proto3" form:"list" json:"list,omitempty" query:"list"`
}

func (x *MarketResp) Reset() {
	*x = MarketResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketResp) ProtoMessage() {}

func (x *MarketResp) ProtoReflect() protoreflect.Message {
	mi := &file_market_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketResp.ProtoReflect.Descriptor instead.
func (*MarketResp) Descriptor() ([]byte, []int) {
	return file_market_api_proto_rawDescGZIP(), []int{6}
}

func (x *MarketResp) GetList() []*CoinThumbResp {
	if x != nil {
		return x.List
	}
	return nil
}

var File_market_api_proto protoreflect.FileDescriptor

var file_market_api_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x09,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x0b, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x22, 0x0a, 0x0c,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x22, 0xe4, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x68,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x68, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x73, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x75, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x73, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x08, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x42, 0x75, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a,
	0x11, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x54, 0x75,
	0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65,
	0x78, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xad, 0x07, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x61, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6e, 0x79, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x6e, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x70, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x70,
	0x63, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x73, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x75, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x64, 0x5f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x32, 0xe8, 0x02, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x61, 0x0a,
	0x10, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x1e, 0xd2, 0xc1, 0x18, 0x1a, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x2d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x2d, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x56, 0x0a, 0x0b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x12,
	0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x18,
	0xd2, 0xc1, 0x18, 0x14, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x2d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x57, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x52, 0x65, 0x73, 0x70, 0x22, 0x17, 0xd2, 0xc1, 0x18, 0x13, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2d, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x4a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x22, 0x15, 0xd2, 0xc1, 0x18, 0x11, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x73, 0x0a,
	0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0xd2,
	0xc1, 0x18, 0x1f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x64, 0x2f, 0x3a, 0x75, 0x6e,
	0x69, 0x74, 0x42, 0x16, 0x5a, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_market_api_proto_rawDescOnce sync.Once
	file_market_api_proto_rawDescData = file_market_api_proto_rawDesc
)

func file_market_api_proto_rawDescGZIP() []byte {
	file_market_api_proto_rawDescOnce.Do(func() {
		file_market_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_api_proto_rawDescData)
	})
	return file_market_api_proto_rawDescData
}

var file_market_api_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_market_api_proto_goTypes = []interface{}{
	(*RateRequest)(nil),      // 0: market_api.RateRequest
	(*RateResponse)(nil),     // 1: market_api.RateResponse
	(*CoinThumbResp)(nil),    // 2: market_api.CoinThumbResp
	(*MarketReq)(nil),        // 3: market_api.MarketReq
	(*ExchangeCoinResp)(nil), // 4: market_api.ExchangeCoinResp
	(*Coin)(nil),             // 5: market_api.Coin
	(*MarketResp)(nil),       // 6: market_api.MarketResp
}
var file_market_api_proto_depIdxs = []int32{
	2, // 0: market_api.MarketResp.list:type_name -> market_api.CoinThumbResp
	3, // 1: market_api.Market.SymbolThumbTrend:input_type -> market_api.MarketReq
	3, // 2: market_api.Market.SymbolThumb:input_type -> market_api.MarketReq
	3, // 3: market_api.Market.SymbolInfo:input_type -> market_api.MarketReq
	3, // 4: market_api.Market.CoinInfo:input_type -> market_api.MarketReq
	0, // 5: market_api.ExchangRate.GetUsdRate:input_type -> market_api.RateRequest
	6, // 6: market_api.Market.SymbolThumbTrend:output_type -> market_api.MarketResp
	6, // 7: market_api.Market.SymbolThumb:output_type -> market_api.MarketResp
	2, // 8: market_api.Market.SymbolInfo:output_type -> market_api.CoinThumbResp
	5, // 9: market_api.Market.CoinInfo:output_type -> market_api.Coin
	1, // 10: market_api.ExchangRate.GetUsdRate:output_type -> market_api.RateResponse
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_market_api_proto_init() }
func file_market_api_proto_init() {
	if File_market_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinThumbResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeCoinResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_market_api_proto_goTypes,
		DependencyIndexes: file_market_api_proto_depIdxs,
		MessageInfos:      file_market_api_proto_msgTypes,
	}.Build()
	File_market_api_proto = out.File
	file_market_api_proto_rawDesc = nil
	file_market_api_proto_goTypes = nil
	file_market_api_proto_depIdxs = nil
}

