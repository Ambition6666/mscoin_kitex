// Code generated by hertz generator. DO NOT EDIT.

package model

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/adaptor"
	"github.com/cloudwego/kitex/pkg/klog"
	"github.com/hertz-contrib/cors"
	"market_api/biz/handler"
	"market_api/ws"
	"time"
)

/*
 This file will register all the routes of the services in the master idl.
 And it will update automatically when you use the "update" command for the idl.
 So don't modify the contents of the file, or your code will be deleted when it is updated.
*/

// Register register routes based on the IDL 'api.${HTTP Method}' annotation.
func Register(r *server.Hertz) {
	r.Use(cors.New(cors.Config{


		//准许跨域请求网站,多个使用,分开,限制使用*
		AllowOrigins: []string{

			"*"},
		//准许使用的请求方式
		AllowMethods: []string{

			"PUT", "PATCH", "POST", "GET", "DELETE"},
		//准许使用的请求表头
		AllowHeaders: []string{

			"Origin", "Authorization", "Content-Type"},
		//显示的请求表头
		ExposeHeaders: []string{

			"Content-Type"},
		//凭证共享,确定共享
		AllowCredentials: true,
		//容许跨域的原点网站,可以直接return true就万事大吉了
		AllowOriginFunc: func(origin string) bool {


			return true
		},
		//超时时间设定
		MaxAge: 24 * time.Hour,
	}))
	root := r.Group("/", rootMw()...)
	{
		_market := root.Group("/market", _marketMw()...)
		_market.POST("/coin-info", append(_coininfoMw(), handler.CoinInfo)...)
		_market.POST("/symbol-info", append(_symbolinfoMw(), handler.SymbolInfo)...)
		_market.POST("/symbol-thumb", append(_symbolthumbMw(), handler.SymbolThumb)...)
		_market.POST("/symbol-thumb-trend", append(_symbolthumbtrendMw(), handler.SymbolThumbTrend)...)
		_market.GET("/history", append(_historyMw(), handler.History)...)
		{
			_exchange_rate := _market.Group("/exchange-rate", _exchange_rateMw()...)
			{
				_usd := _exchange_rate.Group("/usd", _usdMw()...)
				_usd.POST("/:unit", append(_getusdrateMw(), handler.GetUsdRate)...)
			}
		}
	}
}


func RegisterWS(r *server.Hertz, wsServer *ws.WebSocketServer) {
	// 处理 WebSocket 请求并将其转发到 WebSocket 服务器
	r.GET("/socket.io/", func(c context.Context, ctx *app.RequestContext) {
		req, err := adaptor.GetCompatRequest(&ctx.Request)
		if err != nil {
			klog.Error(err)
			return
		}
		// caution: don't pass in c.GetResponse() as it return a copy of response
		rw := adaptor.GetCompatResponseWriter(&ctx.Response)

		wsServer.Serve(req, rw)
	})

	r.POST("/socket.io/", func(c context.Context, ctx *app.RequestContext) {
		req, err := adaptor.GetCompatRequest(&ctx.Request)
		if err != nil {
			klog.Error(err)
			return
		}
		// caution: don't pass in c.GetResponse() as it return a copy of response
		rw := adaptor.GetCompatResponseWriter(&ctx.Response)

		wsServer.Serve(req, rw)
	})
}